name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - 'Dockerfile'
      - 'docker-compose*.yml'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run npm audit
        id: npm-audit
        run: |
          npm audit --json > npm-audit-report.json || true
          npm audit --production --audit-level=moderate || true
      
      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit-report.json
          retention-days: 30
      
      - name: Check for critical vulnerabilities
        run: |
          if npm audit --production --audit-level=critical --json | jq -e '.metadata.vulnerabilities.critical > 0'; then
            echo "Critical vulnerabilities found!"
            npm audit --production --audit-level=critical
            exit 1
          fi
  
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
  
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t puppeteer-mcp:security-scan .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'puppeteer-mcp:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'puppeteer-mcp:security-scan'
          fail-build: true
          severity-cutoff: high
      
      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
  
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
      
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  compliance-check:
    name: NIST Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run NIST compliance scanner
        run: |
          # Check for NIST control tags in security-related code
          echo "Scanning for NIST control compliance..."
          npm run security:check || node scripts/security-check.js
          
          # Verify security headers implementation
          grep -r "@nist" src/ || echo "Warning: No NIST control tags found"
      
      - name: Generate compliance report
        run: |
          mkdir -p compliance-reports
          echo "# NIST Compliance Report" > compliance-reports/nist-report.md
          echo "Generated on: $(date)" >> compliance-reports/nist-report.md
          echo "" >> compliance-reports/nist-report.md
          
          # Find all NIST tagged functions
          echo "## Tagged Security Controls" >> compliance-reports/nist-report.md
          grep -r "@nist" src/ --include="*.ts" --include="*.js" | \
            sed 's/.*@nist/- NIST Control:/' >> compliance-reports/nist-report.md || \
            echo "No NIST controls found" >> compliance-reports/nist-report.md
      
      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: compliance-reports/
          retention-days: 90