name: Functional Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 */6 * * *' # Run every 6 hours
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  pull-requests: write

env:
  NODE_VERSION: '20'
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: false
  PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable

jobs:
  test-matrix:
    name: Functional Test Suite - ${{ matrix.suite }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        suite:
          - mcp-tools
          - browser-commands
          - cross-protocol
          - resources
          - performance
        include:
          - suite: mcp-tools
            test-pattern: 'tests/functional/mcp-tools-comprehensive.test.ts'
            timeout: 20
          - suite: browser-commands
            test-pattern: 'tests/functional/browser-commands-comprehensive.test.ts'
            timeout: 25
          - suite: cross-protocol
            test-pattern: 'cross-protocol'
            timeout: 30
          - suite: resources
            test-pattern: 'tests/functional/resources-comprehensive.test.ts'
            timeout: 15
          - suite: performance
            test-pattern: ''
            timeout: 30
            custom-path: 'tests/performance/performance-suite.test.ts'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Verify Chrome installation
        run: |
          echo "Chrome executable path:"
          which google-chrome-stable || which chromium || which chrome || echo "Chrome not found in PATH"
          echo "Chrome version:"
          google-chrome-stable --version || chromium --version || chrome --version || echo "Unable to get Chrome version"
          echo "Setting PUPPETEER_EXECUTABLE_PATH"
          CHROME_PATH=$(which google-chrome-stable || which chromium || which chrome || echo "")
          if [ -n "$CHROME_PATH" ]; then
            echo "PUPPETEER_EXECUTABLE_PATH=$CHROME_PATH" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm run build

      - name: Setup test environment
        run: |
          # Create test directories
          mkdir -p test-results
          mkdir -p test-reports
          mkdir -p screenshots

          # Setup environment variables
          echo "JWT_SECRET=test-secret-key" >> $GITHUB_ENV
          echo "API_KEY_SECRET=test-api-key-secret" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "TLS_ENABLED=false" >> $GITHUB_ENV
          echo "TEST_SERVER_PORT=8443" >> $GITHUB_ENV
          echo "ALLOWED_ORIGINS=http://localhost:8443,https://localhost:8443,ws://localhost:8443" >> $GITHUB_ENV

          # Additional CI-specific settings
          echo "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

          # Debug information
          echo "Environment setup complete. Key variables:"
          echo "NODE_ENV=$NODE_ENV"
          echo "CI=$CI"
          echo "PUPPETEER_EXECUTABLE_PATH=$PUPPETEER_EXECUTABLE_PATH"

      - name: Start services
        run: |
          # Start main REST server in background with functional test flag
          START_SERVER=true npm run start > services.log 2>&1 &

          # Wait for service to be ready
          echo "Waiting for service to start..."
          sleep 15

          # Check service health with retries
          for i in {1..5}; do
            if curl -f http://localhost:8443/health; then
              echo "Service is healthy!"
              break
            else
              echo "Attempt $i failed, waiting..."
              sleep 5
            fi
            if [ $i -eq 5 ]; then
              echo "Service failed to start after 5 attempts"
              cat services.log
              exit 1
            fi
          done

      - name: Run functional tests
        id: test
        run: |
          if [ -n "${{ matrix.custom-path }}" ]; then
            # Run specific test file directly for performance tests
            npm test -- "${{ matrix.custom-path }}" \
              --json \
              --outputFile=test-results/${{ matrix.suite }}-results.json \
              --no-coverage
          else
            # Run functional tests with pattern (coverage disabled in jest config)
            npm run test:functional -- \
              --testPathPattern="${{ matrix.test-pattern }}" \
              --json \
              --outputFile=test-results/${{ matrix.suite }}-results.json
          fi
        timeout-minutes: ${{ matrix.timeout }}

      - name: Generate test report
        if: always()
        run: |
          # Generate summary (HTML report generation not yet implemented)
          node scripts/generate-test-summary.js \
            test-results/${{ matrix.suite }}-results.json \
            > test-reports/${{ matrix.suite }}-summary.md

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.suite }}
          path: |
            test-results/
            test-reports/
            coverage/
            screenshots/
            services.log
          retention-days: 30

      # Coverage disabled for functional tests to avoid Puppeteer conflicts
      # - name: Upload coverage to Codecov
      #   if: matrix.suite != 'performance'
      #   uses: codecov/codecov-action@v4
      #   with:
      #     directory: coverage/${{ matrix.suite }}
      #     flags: functional-${{ matrix.suite }}
      #     fail_ci_if_error: false

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read test summary
            const summaryPath = path.join('test-reports', '${{ matrix.suite }}-summary.md');
            let summary = '## Functional Test Results - ${{ matrix.suite }}\n\n';

            if (fs.existsSync(summaryPath)) {
              summary += fs.readFileSync(summaryPath, 'utf8');
            } else {
              summary += '❌ Test summary not found';
            }

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Functional Test Results - ${{ matrix.suite }}')
            );

            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

  aggregate-results:
    name: Aggregate Test Results
    needs: test-matrix
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Generate aggregate report
        run: |
          # Combine all test results
          node scripts/aggregate-test-results.js test-artifacts > aggregate-report.md

          # Generate badges
          node scripts/generate-badges.js test-artifacts

      - name: Upload aggregate report
        uses: actions/upload-artifact@v4
        with:
          name: aggregate-test-report
          path: |
            aggregate-report.md
            badges/

      - name: Update README badges
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Update README with latest test badges
          node scripts/update-readme-badges.js

          # Commit if changed
          if git diff --quiet; then
            echo "No badge updates needed"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -am "Update test badges [skip ci]"
            git push
          fi

  # Performance analysis temporarily disabled due to format incompatibility
  # The performance tests generate custom metrics format but the analysis
  # script expects Jest test results format. Performance monitoring is
  # handled by the separate Performance Monitoring workflow.
  #
  # TODO: Either create compatible analysis script or restructure performance tests
  performance-analysis:
    name: Performance Analysis (Disabled)
    needs: test-matrix
    runs-on: ubuntu-latest
    if: false # Disabled until format compatibility is resolved

    steps:
      - name: Skip performance analysis
        run: |
          echo "Performance analysis skipped due to format incompatibility"
          echo "Use Performance Monitoring workflow for benchmark analysis"

  notify-status:
    name: Notify Test Status
    needs: [test-matrix, aggregate-results]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Determine overall status
        id: status
        run: |
          if [ "${{ needs.test-matrix.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=All functional tests passed!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Some functional tests failed." >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            ${{ steps.status.outputs.emoji }} Functional Tests: ${{ steps.status.outputs.message }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
