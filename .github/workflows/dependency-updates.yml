name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Type of updates to perform'
        required: false
        type: choice
        options:
          - all
          - security
          - minor
          - patch
        default: all

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

jobs:
  # Analyze dependencies
  analyze-dependencies:
    name: Analyze Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      security-updates: ${{ steps.security.outputs.count }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Check for outdated packages
        id: check
        run: |
          # Check for outdated packages
          npm outdated --json > outdated.json || true
          
          # Parse results
          node -e "
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            const count = Object.keys(outdated).length;
            console.log(\`Found \${count} outdated packages\`);
            
            if (count > 0) {
              console.log('::set-output name=has-updates::true');
              
              // Generate summary
              const summary = Object.entries(outdated).map(([pkg, info]) => {
                return \`- \${pkg}: \${info.current} → \${info.wanted} (latest: \${info.latest})\`;
              }).join('\\n');
              
              fs.writeFileSync('outdated-summary.txt', summary);
            } else {
              console.log('::set-output name=has-updates::false');
            }
          "
          
      - name: Check for security updates
        id: security
        run: |
          # Run security audit
          npm audit --json > audit.json || true
          
          # Count vulnerabilities
          node -e "
            const audit = JSON.parse(require('fs').readFileSync('audit.json', 'utf8'));
            const vulns = audit.metadata?.vulnerabilities || {};
            const total = Object.values(vulns).reduce((sum, count) => sum + count, 0);
            console.log(\`Found \${total} vulnerabilities\`);
            console.log('::set-output name=count::' + total);
          "
          
      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            outdated.json
            audit.json
            outdated-summary.txt
          retention-days: 7

  # Update dependencies
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.has-updates == 'true' || needs.analyze-dependencies.outputs.security-updates > 0
    
    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create update branch
        run: |
          BRANCH_NAME="deps/update-$(date +%Y%m%d)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
      - name: Update dependencies
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update-type || 'all' }}"
          
          case $UPDATE_TYPE in
            security)
              echo "Updating security vulnerabilities only..."
              npm audit fix --force
              ;;
            patch)
              echo "Updating patch versions..."
              npm update --save
              ;;
            minor)
              echo "Updating minor versions..."
              # Update to wanted versions
              npm outdated --json | jq -r 'to_entries | .[] | select(.value.wanted != .value.current) | .key' | xargs -I {} npm install {}@latest
              ;;
            all)
              echo "Updating all dependencies..."
              # Update everything to latest
              npm outdated --json | jq -r 'to_entries | .[] | .key' | xargs -I {} npm install {}@latest
              ;;
          esac
          
          # Update lock file
          npm install
          
      - name: Update sub-packages
        run: |
          # Update starlight-docs dependencies
          if [ -d "starlight-docs" ]; then
            cd starlight-docs
            npm update --save
            npm audit fix || true
            cd ..
          fi
          
          # Update example dependencies
          if [ -d "examples" ]; then
            cd examples
            npm update --save
            cd ..
          fi
          
      - name: Run tests
        run: |
          npm run test
          npm run build
          npm run lint || true
          
      - name: Generate update report
        run: |
          # Create detailed update report
          cat > update-report.md << 'EOF'
          # Dependency Update Report
          
          ## Update Type: ${{ github.event.inputs.update-type || 'all' }}
          
          ## Changes Made
          
          ### Package Updates
          EOF
          
          # Add git diff summary
          git diff package.json | grep -E "^[+-]" | grep -v "^[+-]{3}" >> update-report.md || echo "No changes to package.json" >> update-report.md
          
          # Add security fixes
          echo -e "\n### Security Fixes" >> update-report.md
          npm audit --production >> update-report.md 2>&1 || echo "No security vulnerabilities found" >> update-report.md
          
          # Add test results
          echo -e "\n### Test Results" >> update-report.md
          echo "- Unit Tests: ✅ Passed" >> update-report.md
          echo "- Build: ✅ Successful" >> update-report.md
          echo "- Lint: ⚠️  Check required" >> update-report.md
          
      - name: Commit changes
        run: |
          git add -A
          git commit -m "chore(deps): update dependencies

          - Update type: ${{ github.event.inputs.update-type || 'all' }}
          - Security fixes: ${{ needs.analyze-dependencies.outputs.security-updates }}
          - Updated packages: see PR description for details
          
          [skip ci]" || echo "No changes to commit"
          
      - name: Push changes
        run: |
          git push origin $BRANCH_NAME || echo "No changes to push"
          
      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch: ${{ env.BRANCH_NAME }}
          title: "chore(deps): update dependencies"
          body: |
            ## 🔄 Dependency Update
            
            This PR updates project dependencies based on the configured update policy.
            
            ### Update Type
            `${{ github.event.inputs.update-type || 'all' }}`
            
            ### Security Vulnerabilities
            - Before: ${{ needs.analyze-dependencies.outputs.security-updates }}
            - After: Run security check after merge
            
            ### Changes
            Please review the file changes for a detailed list of updated packages.
            
            ### Testing
            - [x] Unit tests pass
            - [x] Build successful
            - [ ] Manual testing required
            - [ ] Security scan clean
            
            ### Update Report
            See attached `update-report.md` for detailed changes.
            
            ---
            *This PR was automatically created by the dependency update workflow.*
          labels: |
            dependencies
            automated
            security
          assignees: ${{ github.actor }}
          
      - name: Add update report as comment
        if: env.BRANCH_NAME != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('update-report.md', 'utf8');
            
            // Find the PR
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${process.env.BRANCH_NAME}`,
              state: 'open'
            });
            
            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prs.data[0].number,
                body: report
              });
            }

  # Security scan on updated dependencies
  security-scan-updates:
    name: Security Scan Updates
    runs-on: ubuntu-latest
    needs: update-dependencies
    if: always()
    
    steps:
      - name: Checkout update branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          npm audit --production --json > audit-after.json || true
          
      - name: Run Snyk security scan
        if: env.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install -g snyk
          snyk test --severity-threshold=high --json > snyk-report.json || true
          
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'puppeteer-mcp'
          path: '.'
          format: 'JSON'
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-after.json
            snyk-report.json
            reports/
          retention-days: 30

  # Create dependency update summary
  create-summary:
    name: Create Update Summary
    runs-on: ubuntu-latest
    needs: [analyze-dependencies, update-dependencies, security-scan-updates]
    if: always()
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
      - name: Create summary report
        run: |
          echo "# 📊 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis: ${{ needs.analyze-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Updates: ${{ needs.update-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan-updates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "dependency-analysis/outdated-summary.txt" ]; then
            echo "## Outdated Packages" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat dependency-analysis/outdated-summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi