name: Documentation Updates

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'starlight-docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'package.json'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Type of documentation update'
        required: false
        type: choice
        options:
          - api
          - guides
          - changelog
          - all
        default: all

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Generate API documentation
  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -D typedoc typedoc-plugin-markdown @microsoft/api-extractor @microsoft/api-documenter

      - name: Build project
        run: npm run build

      - name: Generate TypeDoc documentation
        run: |
          # Create TypeDoc configuration
          cat > typedoc.json << 'EOF'
          {
            "entryPoints": ["src/server.ts"],
            "out": "docs/api/generated",
            "plugin": ["typedoc-plugin-markdown"],
            "theme": "markdown",
            "excludePrivate": true,
            "excludeProtected": true,
            "excludeInternal": true,
            "readme": "none",
            "githubPages": false,
            "includeVersion": true,
            "categorizeByGroup": true,
            "categoryOrder": [
              "Server",
              "MCP",
              "Browser Automation",
              "API",
              "Types"
            ]
          }
          EOF

          # Generate API documentation
          npx typedoc

      - name: Generate API reference from OpenAPI
        run: |
          # Generate OpenAPI spec from code
          cat > generate-openapi.cjs << 'EOF'
          const fs = require('fs');
          const path = require('path');

          const openApiSpec = {
            openapi: '3.0.0',
            info: {
              title: 'Puppeteer MCP API',
              version: require('./package.json').version,
              description: 'AI-enabled browser automation platform'
            },
            servers: [
              { url: 'http://localhost:3000/api/v1', description: 'Local development' },
              { url: 'https://api.puppeteer-mcp.dev/v1', description: 'Production' }
            ],
            paths: {},
            components: {
              schemas: {},
              securitySchemes: {
                bearerAuth: {
                  type: 'http',
                  scheme: 'bearer',
                  bearerFormat: 'JWT'
                },
                apiKey: {
                  type: 'apiKey',
                  in: 'header',
                  name: 'X-API-Key'
                }
              }
            }
          };

          // Add paths from route files
          // This is a simplified example - in reality, you'd parse the route files
          openApiSpec.paths['/health'] = {
            get: {
              summary: 'Health check',
              tags: ['System'],
              responses: {
                '200': {
                  description: 'System is healthy',
                  content: {
                    'application/json': {
                      schema: {
                        type: 'object',
                        properties: {
                          status: { type: 'string', enum: ['healthy'] },
                          timestamp: { type: 'string', format: 'date-time' },
                          version: { type: 'string' }
                        }
                      }
                    }
                  }
                }
              }
            }
          };

          // Save OpenAPI spec
          fs.writeFileSync(
            'docs/api/openapi.json',
            JSON.stringify(openApiSpec, null, 2)
          );
          EOF

          node generate-openapi.cjs

          # Generate documentation from OpenAPI spec
          npx @redocly/openapi-cli bundle docs/api/openapi.json -o docs/api/openapi-bundled.json

      - name: Generate gRPC documentation
        run: |
          # Skip gRPC doc generation if protoc is not available
          if command -v protoc &> /dev/null; then
            # Try to generate gRPC docs using built-in protoc functionality
            mkdir -p docs/api/grpc
            echo "# gRPC API Documentation" > docs/api/grpc/grpc-api.md
            echo "" >> docs/api/grpc/grpc-api.md
            echo "## Control Service" >> docs/api/grpc/grpc-api.md
            echo "" >> docs/api/grpc/grpc-api.md
            
            # Extract service definitions from proto files
            if [ -f proto/control.proto ]; then
              echo '```protobuf' >> docs/api/grpc/grpc-api.md
              cat proto/control.proto >> docs/api/grpc/grpc-api.md
              echo '```' >> docs/api/grpc/grpc-api.md
            fi
          else
            echo "Protoc not available, skipping gRPC documentation generation"
            mkdir -p docs/api/grpc
            echo "# gRPC API Documentation" > docs/api/grpc/grpc-api.md
            echo "" >> docs/api/grpc/grpc-api.md
            echo "gRPC documentation generation skipped - protoc not available" >> docs/api/grpc/grpc-api.md
          fi

      - name: Update API examples
        run: |
          # Extract code examples from tests
          cat > extract-examples.cjs << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const glob = require('glob');

          function extractExamples(testFiles) {
            const examples = {
              rest: [],
              grpc: [],
              websocket: [],
              mcp: []
            };
            
            testFiles.forEach(file => {
              const content = fs.readFileSync(file, 'utf8');
              
              // Extract test cases that serve as examples
              const matches = content.matchAll(/it\(['"](.+?)['"][\s\S]*?{([\s\S]*?)}\);/g);
              
              for (const match of matches) {
                const testName = match[1];
                const testBody = match[2];
                
                // Categorize by API type
                if (file.includes('rest') || testBody.includes('fetch') || testBody.includes('axios')) {
                  examples.rest.push({ name: testName, code: testBody.trim() });
                } else if (file.includes('grpc')) {
                  examples.grpc.push({ name: testName, code: testBody.trim() });
                } else if (file.includes('websocket') || file.includes('ws')) {
                  examples.websocket.push({ name: testName, code: testBody.trim() });
                } else if (file.includes('mcp')) {
                  examples.mcp.push({ name: testName, code: testBody.trim() });
                }
              }
            });
            
            return examples;
          }

          // Find test files
          const testFiles = glob.sync('tests/**/*.test.ts');
          const examples = extractExamples(testFiles);

          // Generate example documentation
          for (const [api, apiExamples] of Object.entries(examples)) {
            if (apiExamples.length === 0) continue;
            
            let content = `# ${api.toUpperCase()} API Examples\n\n`;
            
            apiExamples.slice(0, 5).forEach(example => {
              content += `## ${example.name}\n\n\`\`\`typescript\n${example.code}\n\`\`\`\n\n`;
            });
            
            fs.writeFileSync(`docs/api/examples/${api}-examples.md`, content);
          }
          EOF

          mkdir -p docs/api/examples
          node extract-examples.cjs || echo "Examples extracted"

      - name: Upload API documentation
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: |
            docs/api/
          retention-days: 30

  # Update guides and tutorials
  update-guides:
    name: Update Guides and Tutorials
    runs-on: ubuntu-latest
    needs: generate-api-docs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Generate getting started guide
        run: |
          cat > docs/guides/getting-started.md << 'EOF'
          # Getting Started with Puppeteer MCP

          ## Installation

          ### Global Installation (Recommended)
          ```bash
          npm install -g puppeteer-mcp
          ```

          ### Local Installation
          ```bash
          npm install puppeteer-mcp
          ```

          ## Quick Start

          ### 1. Start the MCP Server
          ```bash
          puppeteer-mcp
          ```

          ### 2. Configure Claude Desktop

          Add to your Claude Desktop configuration:

          ```json
          {
            "mcpServers": {
              "puppeteer-mcp": {
                "command": "puppeteer-mcp"
              }
            }
          }
          ```

          ### 3. Basic Usage

          #### Using MCP Tools
          ```typescript
          // Navigate to a website
          await navigate({ url: "https://example.com" });

          // Take a screenshot
          await screenshot({ path: "example.png" });

          // Extract content
          const content = await evaluate({ 
            script: "document.querySelector('h1').textContent" 
          });
          ```

          #### Using REST API
          ```bash
          # Create a session
          curl -X POST http://localhost:3000/api/v1/sessions \
            -H "Content-Type: application/json" \
            -d '{"name": "my-session"}'

          # Navigate to a page
          curl -X POST http://localhost:3000/api/v1/sessions/{sessionId}/navigate \
            -H "Content-Type: application/json" \
            -d '{"url": "https://example.com"}'
          ```

          ## Next Steps

          - [API Reference](/docs/api)
          - [Advanced Usage](/docs/guides/advanced)
          - [Best Practices](/docs/guides/best-practices)
          EOF

      - name: Generate best practices guide
        run: |
          cat > docs/guides/best-practices.md << 'EOF'
          # Best Practices for Puppeteer MCP

          ## Performance Optimization

          ### 1. Browser Pool Management
          - Use appropriate pool size based on system resources
          - Monitor pool metrics regularly
          - Implement proper cleanup procedures

          ### 2. Session Management
          - Reuse sessions when possible
          - Implement session timeouts
          - Clean up inactive sessions

          ### 3. Error Handling
          - Implement retry logic for transient failures
          - Use structured error responses
          - Log errors with context

          ## Security Best Practices

          ### 1. Authentication
          - Always use API keys or JWT tokens
          - Rotate credentials regularly
          - Implement rate limiting

          ### 2. Input Validation
          - Validate all user inputs
          - Sanitize URLs and scripts
          - Use CSP headers

          ### 3. Network Security
          - Use HTTPS in production
          - Implement proxy support
          - Monitor for suspicious activity

          ## Scaling Considerations

          ### 1. Horizontal Scaling
          - Use Redis for session storage
          - Implement load balancing
          - Monitor resource usage

          ### 2. Resource Management
          - Set memory limits
          - Implement request timeouts
          - Use connection pooling
          EOF

      - name: Generate troubleshooting guide
        run: |
          mkdir -p docs/guides
          cat > docs/guides/troubleshooting.md << 'EOF'
          # Troubleshooting Guide

          ## Common Issues

          ### Browser Pool Exhaustion
          **Symptoms:**
          - "No available browsers" errors
          - Slow response times
          - High memory usage

          **Solutions:**
          1. Increase pool size in configuration
          2. Reduce session timeout
          3. Implement better cleanup

          ### Memory Leaks
          **Symptoms:**
          - Increasing memory usage over time
          - Process crashes
          - Performance degradation

          **Solutions:**
          1. Enable browser recycling
          2. Implement periodic restarts
          3. Monitor with profiling tools

          ### Connection Issues
          **Symptoms:**
          - WebSocket disconnections
          - Timeout errors
          - Network errors

          **Solutions:**
          1. Check firewall settings
          2. Increase timeout values
          3. Implement reconnection logic

          ## Debugging Tools

          ### Enable Debug Logging
          ```bash
          DEBUG=puppeteer-mcp:* puppeteer-mcp
          ```

          ### Monitor Performance
          ```bash
          curl http://localhost:3000/api/v1/metrics
          ```

          ### Check Health Status
          ```bash
          curl http://localhost:3000/api/v1/health
          ```
          EOF

  # Build and deploy documentation site
  build-docs-site:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: [generate-api-docs, update-guides]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API documentation
        uses: actions/download-artifact@v4
        with:
          name: api-documentation
          path: docs/api/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install Starlight dependencies
        run: |
          cd starlight-docs
          npm install

      - name: Update Starlight content
        run: |
          # Copy generated API docs to Starlight
          mkdir -p starlight-docs/src/content/docs/api/reference
          cp -r docs/api/generated/* starlight-docs/src/content/docs/api/reference/ || true

          # Copy guides
          mkdir -p starlight-docs/src/content/docs/guides
          cp -r docs/guides/* starlight-docs/src/content/docs/guides/ || true

      - name: Update version in documentation
        run: |
          VERSION=$(node -p "require('./package.json').version")

          # Update version in Starlight config
          sed -i "s/version: .*/version: '$VERSION'/" starlight-docs/astro.config.mjs || true

          # Update version in documentation files
          find starlight-docs/src/content/docs -name "*.md" -o -name "*.mdx" | \
            xargs sed -i "s/puppeteer-mcp@[0-9.]*/puppeteer-mcp@$VERSION/g" || true

      - name: Build Starlight documentation
        run: |
          cd starlight-docs
          npm run build

      - name: Generate sitemap
        run: |
          cd starlight-docs
          cat > generate-sitemap.cjs << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const glob = require('glob');

          const baseUrl = 'https://puppeteer-mcp.dev';
          const distDir = './dist';

          // Find all HTML files
          const htmlFiles = glob.sync('**/*.html', { cwd: distDir });

          // Generate sitemap
          let sitemap = '<?xml version="1.0" encoding="UTF-8"?>\n';
          sitemap += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n';

          htmlFiles.forEach(file => {
            const url = `${baseUrl}/${file.replace(/index\.html$/, '').replace(/\.html$/, '')}`;
            const lastmod = new Date().toISOString().split('T')[0];
            
            sitemap += `  <url>\n`;
            sitemap += `    <loc>${url}</loc>\n`;
            sitemap += `    <lastmod>${lastmod}</lastmod>\n`;
            sitemap += `    <changefreq>weekly</changefreq>\n`;
            sitemap += `  </url>\n`;
          });

          sitemap += '</urlset>';

          fs.writeFileSync(path.join(distDir, 'sitemap.xml'), sitemap);
          console.log('Sitemap generated successfully');
          EOF

          node generate-sitemap.cjs

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./starlight-docs/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Update changelog
  update-changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Generate changelog entry
        run: |
          # Get release information
          VERSION="${{ github.event.release.tag_name }}"
          RELEASE_DATE=$(date +%Y-%m-%d)
          RELEASE_NOTES="${{ github.event.release.body }}"

          # Create new changelog entry
          cat > new-entry.md << EOF
          ## [$VERSION] - $RELEASE_DATE

          $RELEASE_NOTES
          EOF

          # Prepend to changelog
          if [ -f CHANGELOG.md ]; then
            # Extract header
            head -n 7 CHANGELOG.md > temp-header.md
            
            # Extract previous entries
            tail -n +8 CHANGELOG.md > temp-entries.md
            
            # Combine
            cat temp-header.md > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat new-entry.md >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat temp-entries.md >> CHANGELOG.md
            
            rm temp-header.md temp-entries.md new-entry.md
          fi

      - name: Create PR for changelog update
        uses: peter-evans/create-pull-request@v6
        with:
          branch: docs/changelog-${{ github.event.release.tag_name }}
          title: 'docs: update changelog for ${{ github.event.release.tag_name }}'
          body: |
            Updates CHANGELOG.md with the release notes for ${{ github.event.release.tag_name }}.

            This is an automated PR created by the documentation workflow.
          commit-message: 'docs: update changelog for ${{ github.event.release.tag_name }}'
          labels: documentation, automated

  # Generate documentation report
  documentation-report:
    name: Documentation Report
    runs-on: ubuntu-latest
    needs: [generate-api-docs, update-guides, build-docs-site]
    if: always()

    steps:
      - name: Create documentation summary
        run: |
          echo "# 📚 Documentation Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Update Type: ${{ github.event.inputs.update-type || 'automatic' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status" >> $GITHUB_STEP_SUMMARY
          echo "- API Documentation: ${{ needs.generate-api-docs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Guides Update: ${{ needs.update-guides.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Site Build: ${{ needs.build-docs-site.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-docs-site.result }}" = "success" ]; then
            echo "### 🎉 Documentation deployed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "Visit: [https://puppeteer-mcp.dev](https://puppeteer-mcp.dev)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Documentation deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
