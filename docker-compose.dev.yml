version: '3.8'

# Development docker-compose configuration
# Following CN:DOCKER standards with security enhancements
# @nist cm-2 "Baseline Configuration"
# @nist sc-7 "Boundary Protection"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-dev}
    container_name: puppeteer-mcp-dev
    ports:
      - "8443:8443"
      - "9229:9229"  # Node.js debugger port
    environment:
      - NODE_ENV=development
      - PORT=8443
      - LOG_LEVEL=debug
      - JWT_SECRET=dev-secret-change-in-production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://mcp:mcp-password@postgres:5432/puppeteer_mcp
      - NODE_OPTIONS=--inspect=0.0.0.0:9229 --enable-source-maps
    volumes:
      - ./src:/app/src:ro
      - ./proto:/app/proto:ro
      - ./tests:/app/tests:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./jest.config.mjs:/app/jest.config.mjs:ro
      - node_modules:/app/node_modules
    command: npm run dev
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    read_only: false  # Development needs write access
    tmpfs:
      - /tmp
      - /app/dist

  redis:
    image: redis:7-alpine
    container_name: puppeteer-mcp-redis
    command: >
      redis-server
      --appendonly yes
      --requirepass redis-dev-password
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  postgres:
    image: postgres:15-alpine
    container_name: puppeteer-mcp-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=mcp
      - POSTGRES_PASSWORD=mcp-password
      - POSTGRES_DB=puppeteer_mcp
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp -d puppeteer_mcp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb

  # Development tools
  adminer:
    image: adminer:latest
    container_name: puppeteer-mcp-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - postgres
    networks:
      - mcp-network
    profiles:
      - tools

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: puppeteer-mcp-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis-dev-password
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin-dev-password
    depends_on:
      - redis
    networks:
      - mcp-network
    profiles:
      - tools

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-mcp
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  node_modules:
    driver: local