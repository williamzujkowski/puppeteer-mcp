version: '3.8'

# Comprehensive Development Docker Compose Configuration
# puppeteer-mcp with full observability stack
# Following CN:DOCKER standards with security enhancements
# @nist cm-2 "Baseline Configuration"
# @nist sc-7 "Boundary Protection"

services:
  # ==================== Core Application ====================
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-dev}
    container_name: puppeteer-mcp-app
    hostname: puppeteer-mcp
    ports:
      - '8443:8443' # HTTPS API
      - '50051:50051' # gRPC
      - '9229:9229' # Node.js debugger
      - '9464:9464' # Prometheus metrics
    environment:
      - NODE_ENV=development
      - PORT=8443
      - GRPC_PORT=50051
      - LOG_LEVEL=debug
      - LOG_FORMAT=pretty

      # Security
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-change-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-dev-session-secret-change-in-production}
      - TLS_ENABLED=false # Disabled for local dev

      # Redis
      - REDIS_URL=redis://:redis-dev-password@redis:6379
      - REDIS_TLS=false

      # PostgreSQL
      - DATABASE_URL=postgresql://mcp:mcp-password@postgres:5432/puppeteer_mcp

      # Puppeteer
      - PUPPETEER_HEADLESS=true
      - BROWSER_POOL_MAX_SIZE=3
      - BROWSER_IDLE_TIMEOUT=300000

      # Telemetry
      - TELEMETRY_ENABLED=true
      - TELEMETRY_SERVICE_NAME=puppeteer-mcp
      - TELEMETRY_ENVIRONMENT=development
      - TELEMETRY_TRACE_EXPORTER=jaeger
      - TELEMETRY_TRACE_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - TELEMETRY_METRICS_EXPORTER=prometheus
      - TELEMETRY_METRICS_PROMETHEUS_PORT=9464
      - TELEMETRY_TRACE_SAMPLING_RATE=1.0
      - TELEMETRY_DEBUG=true

      # Node.js debugging
      - NODE_OPTIONS=--inspect=0.0.0.0:9229 --enable-source-maps --max-old-space-size=512
    volumes:
      - ./src:/app/src:delegated
      - ./proto:/app/proto:ro
      - ./tests:/app/tests:delegated
      - ./scripts:/app/scripts:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./jest.config.mjs:/app/jest.config.mjs:ro
      - ./package.json:/app/package.json:ro
      - node_modules:/app/node_modules
      - dist:/app/dist
    command: npm run dev
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN # Required for Puppeteer
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8443/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # ==================== Data Storage ====================
  redis:
    image: redis:7-alpine
    container_name: puppeteer-mcp-redis
    hostname: redis
    command: >
      redis-server
      --appendonly yes
      --requirepass redis-dev-password
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --loglevel debug
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ['CMD', 'redis-cli', '--no-auth-warning', '-a', 'redis-dev-password', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true

  postgres:
    image: postgres:16-alpine
    container_name: puppeteer-mcp-postgres
    hostname: postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=mcp
      - POSTGRES_PASSWORD=mcp-password
      - POSTGRES_DB=puppeteer_mcp
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U mcp -d puppeteer_mcp']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb

  # ==================== Observability Stack ====================
  jaeger:
    image: jaegertracing/all-in-one:1.58
    container_name: puppeteer-mcp-jaeger
    hostname: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    ports:
      - '5775:5775/udp' # Zipkin compact thrift
      - '6831:6831/udp' # Jaeger compact thrift
      - '6832:6832/udp' # Jaeger binary thrift
      - '5778:5778' # Config HTTP
      - '16686:16686' # Jaeger UI
      - '14268:14268' # Jaeger HTTP collector
      - '14250:14250' # Jaeger gRPC
      - '9411:9411' # Zipkin
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
    volumes:
      - jaeger-data:/badger
    networks:
      - mcp-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:16686/']
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: puppeteer-mcp-prometheus
    hostname: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    networks:
      - mcp-network
    depends_on:
      - app
    healthcheck:
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:9090/-/healthy']
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:11.3.0
    container_name: puppeteer-mcp-grafana
    hostname: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin-dev-password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,redis-app
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - mcp-network
    depends_on:
      - prometheus
      - jaeger
    healthcheck:
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== Development Tools ====================
  adminer:
    image: adminer:4.8.1
    container_name: puppeteer-mcp-adminer
    hostname: adminer
    ports:
      - '8080:8080'
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - postgres
    networks:
      - mcp-network
    profiles:
      - tools

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: puppeteer-mcp-redis-commander
    hostname: redis-commander
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis-dev-password
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin-dev-password
    depends_on:
      - redis
    networks:
      - mcp-network
    profiles:
      - tools

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: puppeteer-mcp-node-exporter
    hostname: node-exporter
    ports:
      - '9100:9100'
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.63.0
    container_name: puppeteer-mcp-redis-exporter
    hostname: redis-exporter
    ports:
      - '9121:9121'
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=redis-dev-password
    depends_on:
      - redis
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Postgres Exporter for PostgreSQL metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.16.0
    container_name: puppeteer-mcp-postgres-exporter
    hostname: postgres-exporter
    ports:
      - '9187:9187'
    environment:
      - DATA_SOURCE_NAME=postgresql://mcp:mcp-password@postgres:5432/puppeteer_mcp?sslmode=disable
    depends_on:
      - postgres
    networks:
      - mcp-network
    profiles:
      - monitoring

  # ==================== Load Testing ====================
  k6:
    image: grafana/k6:0.54.0
    container_name: puppeteer-mcp-k6
    hostname: k6
    networks:
      - mcp-network
    volumes:
      - ./docker/k6/scripts:/scripts:ro
    command: run /scripts/load-test.js
    depends_on:
      - app
    profiles:
      - load-test

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-mcp-dev
      com.docker.network.bridge.enable_icc: 'true'
      com.docker.network.bridge.enable_ip_masquerade: 'true'

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  node_modules:
    driver: local
  dist:
    driver: local
  jaeger-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
