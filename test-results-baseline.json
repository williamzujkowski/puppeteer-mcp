{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":33,"numPassedTests":622,"numPendingTestSuites":1,"numPendingTests":27,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":34,"numTotalTests":649,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":1,"total":1,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1752631727762,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["RedisSessionStore","create"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore create should create a new session in Redis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should create a new session in Redis"},{"ancestorTitles":["RedisSessionStore","create"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore create should fallback to in-memory store when Redis is unavailable","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should fallback to in-memory store when Redis is unavailable"},{"ancestorTitles":["RedisSessionStore","create"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore create should handle Redis errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle Redis errors gracefully"},{"ancestorTitles":["RedisSessionStore","get"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore get should retrieve an existing session from Redis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should retrieve an existing session from Redis"},{"ancestorTitles":["RedisSessionStore","get"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore get should return null for non-existent session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return null for non-existent session"},{"ancestorTitles":["RedisSessionStore","get"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore get should return null for expired session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return null for expired session"},{"ancestorTitles":["RedisSessionStore","get"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore get should fallback to in-memory store on Redis error","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should fallback to in-memory store on Redis error"},{"ancestorTitles":["RedisSessionStore","update"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore update should update an existing session in Redis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should update an existing session in Redis"},{"ancestorTitles":["RedisSessionStore","update"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore update should return null when updating non-existent session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return null when updating non-existent session"},{"ancestorTitles":["RedisSessionStore","delete"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore delete should delete an existing session from Redis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should delete an existing session from Redis"},{"ancestorTitles":["RedisSessionStore","delete"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore delete should return false when deleting non-existent session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return false when deleting non-existent session"},{"ancestorTitles":["RedisSessionStore","deleteExpired"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore deleteExpired should clean up expired sessions from user sets","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should clean up expired sessions from user sets"},{"ancestorTitles":["RedisSessionStore","getByUserId"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore getByUserId should return all sessions for a user","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return all sessions for a user"},{"ancestorTitles":["RedisSessionStore","getByUserId"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore getByUserId should return empty array for user with no sessions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return empty array for user with no sessions"},{"ancestorTitles":["RedisSessionStore","exists"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore exists should return true for existing session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return true for existing session"},{"ancestorTitles":["RedisSessionStore","exists"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore exists should return false for non-existent session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return false for non-existent session"},{"ancestorTitles":["RedisSessionStore","touch"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore touch should update lastAccessedAt for existing session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should update lastAccessedAt for existing session"},{"ancestorTitles":["RedisSessionStore","touch"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore touch should return false for non-existent session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return false for non-existent session"},{"ancestorTitles":["RedisSessionStore","touch"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore touch should return false for expired session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return false for expired session"},{"ancestorTitles":["RedisSessionStore","clear"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore clear should clear all sessions from Redis","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should clear all sessions from Redis"},{"ancestorTitles":["RedisSessionStore","healthCheck"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore healthCheck should return health status for Redis and fallback","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should return health status for Redis and fallback"},{"ancestorTitles":["RedisSessionStore","healthCheck"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore healthCheck should handle Redis health check failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle Redis health check failure"},{"ancestorTitles":["RedisSessionStore","Redis unavailable scenarios"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"RedisSessionStore Redis unavailable scenarios should use fallback store for all operations when Redis is unavailable","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should use fallback store for all operations when Redis is unavailable"}],"coverage":{},"endTime":1752631735093,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/store/redis-session-store.test.ts","startTime":1752631735093,"status":"skipped","summary":""},{"assertionResults":[{"ancestorTitles":["BrowserPool","Pool Initialization"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Pool Initialization should initialize pool with correct configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize pool with correct configuration"},{"ancestorTitles":["BrowserPool","Pool Initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Pool Initialization should apply configuration options correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should apply configuration options correctly"},{"ancestorTitles":["BrowserPool","Pool Initialization"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Pool Initialization should reject invalid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid configuration"},{"ancestorTitles":["BrowserPool","Browser Acquisition and Release"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Acquisition and Release should acquire a browser instance","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should acquire a browser instance"},{"ancestorTitles":["BrowserPool","Browser Acquisition and Release"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Acquisition and Release should release a browser back to pool","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should release a browser back to pool"},{"ancestorTitles":["BrowserPool","Browser Acquisition and Release"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Acquisition and Release should reuse idle browsers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reuse idle browsers"},{"ancestorTitles":["BrowserPool","Browser Acquisition and Release"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Acquisition and Release should handle concurrent acquisitions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle concurrent acquisitions"},{"ancestorTitles":["BrowserPool","Pool Size Limits"],"duration":104,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Pool Size Limits should enforce maximum browser limit","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should enforce maximum browser limit"},{"ancestorTitles":["BrowserPool","Pool Size Limits"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Pool Size Limits should timeout acquisition requests","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should timeout acquisition requests"},{"ancestorTitles":["BrowserPool","Page Management"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Page Management should create a new page","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a new page"},{"ancestorTitles":["BrowserPool","Page Management"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Page Management should enforce page limit per browser","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should enforce page limit per browser"},{"ancestorTitles":["BrowserPool","Page Management"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Page Management should close pages","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close pages"},{"ancestorTitles":["BrowserPool","Idle Timeout"],"duration":152,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Idle Timeout should clean up idle browsers after timeout","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clean up idle browsers after timeout"},{"ancestorTitles":["BrowserPool","Idle Timeout"],"duration":152,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Idle Timeout should not clean up active browsers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not clean up active browsers"},{"ancestorTitles":["BrowserPool","Health Checks"],"duration":53,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Health Checks should perform health check on all browsers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should perform health check on all browsers"},{"ancestorTitles":["BrowserPool","Health Checks"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Health Checks should detect unhealthy browsers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect unhealthy browsers"},{"ancestorTitles":["BrowserPool","Health Checks"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Health Checks should check browser health status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should check browser health status"},{"ancestorTitles":["BrowserPool","Browser Recycling"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Recycling should recycle browser after specified uses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should recycle browser after specified uses"},{"ancestorTitles":["BrowserPool","Browser Recycling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Recycling should manually recycle a browser","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should manually recycle a browser"},{"ancestorTitles":["BrowserPool","Graceful Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Graceful Shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["BrowserPool","Graceful Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Graceful Shutdown should force shutdown when requested","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should force shutdown when requested"},{"ancestorTitles":["BrowserPool","Graceful Shutdown"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Graceful Shutdown should reject new acquisitions after shutdown","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject new acquisitions after shutdown"},{"ancestorTitles":["BrowserPool","Metrics Collection"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Metrics Collection should track browser lifecycle metrics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should track browser lifecycle metrics"},{"ancestorTitles":["BrowserPool","Metrics Collection"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Metrics Collection should calculate utilization percentage","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate utilization percentage"},{"ancestorTitles":["BrowserPool","Metrics Collection"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Metrics Collection should track page counts","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should track page counts"},{"ancestorTitles":["BrowserPool","Error Handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Error Handling should handle browser launch failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle browser launch failures"},{"ancestorTitles":["BrowserPool","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Error Handling should handle page creation failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle page creation failures"},{"ancestorTitles":["BrowserPool","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Error Handling should handle browser restart during recycling","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle browser restart during recycling"},{"ancestorTitles":["BrowserPool","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Error Handling should validate session IDs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate session IDs"},{"ancestorTitles":["BrowserPool","Browser Instance Helpers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Instance Helpers should get browser by ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get browser by ID"},{"ancestorTitles":["BrowserPool","Browser Instance Helpers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Instance Helpers should list all browsers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should list all browsers"},{"ancestorTitles":["BrowserPool","Browser Instance Helpers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserPool Browser Instance Helpers should return undefined for non-existent browser","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined for non-existent browser"}],"endTime":1752631729527,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/browser-pool.test.ts","startTime":1752631728766,"status":"focused","summary":""},{"assertionResults":[{"ancestorTitles":["BrowserHealthChecker","Connection Health"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Connection Health should detect healthy browser connection","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect healthy browser connection"},{"ancestorTitles":["BrowserHealthChecker","Connection Health"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Connection Health should detect disconnected browser","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect disconnected browser"},{"ancestorTitles":["BrowserHealthChecker","Connection Health"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Connection Health should handle browser without process","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle browser without process"},{"ancestorTitles":["BrowserHealthChecker","Responsiveness Check"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Responsiveness Check should detect responsive browser","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect responsive browser"},{"ancestorTitles":["BrowserHealthChecker","Responsiveness Check"],"duration":1001,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Responsiveness Check should detect unresponsive browser","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect unresponsive browser"},{"ancestorTitles":["BrowserHealthChecker","Responsiveness Check"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Responsiveness Check should handle evaluation errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle evaluation errors"},{"ancestorTitles":["BrowserHealthChecker","Memory Usage Check"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Memory Usage Check should detect normal memory usage","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect normal memory usage"},{"ancestorTitles":["BrowserHealthChecker","Memory Usage Check"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Memory Usage Check should detect excessive memory usage","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect excessive memory usage"},{"ancestorTitles":["BrowserHealthChecker","Memory Usage Check"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Memory Usage Check should handle memory check failures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle memory check failures"},{"ancestorTitles":["BrowserHealthChecker","Page Count Check"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Page Count Check should detect normal page count","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect normal page count"},{"ancestorTitles":["BrowserHealthChecker","Page Count Check"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Page Count Check should detect excessive page count","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect excessive page count"},{"ancestorTitles":["BrowserHealthChecker","Restart Functionality"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Restart Functionality should restart unhealthy browser","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should restart unhealthy browser"},{"ancestorTitles":["BrowserHealthChecker","Restart Functionality"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Restart Functionality should handle restart failures","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle restart failures"},{"ancestorTitles":["BrowserHealthChecker","Restart Functionality"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Restart Functionality should handle close failures during restart","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle close failures during restart"},{"ancestorTitles":["BrowserHealthChecker","Metrics Collection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Metrics Collection should collect comprehensive metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should collect comprehensive metrics"},{"ancestorTitles":["BrowserHealthChecker","Metrics Collection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Metrics Collection should calculate uptime correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate uptime correctly"},{"ancestorTitles":["BrowserHealthChecker","Batch Health Checks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Batch Health Checks should check multiple browsers","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should check multiple browsers"},{"ancestorTitles":["BrowserHealthChecker","Batch Health Checks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Batch Health Checks should handle failures in batch checks","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle failures in batch checks"},{"ancestorTitles":["BrowserHealthChecker","Auto-Recovery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Auto-Recovery should perform auto-recovery when enabled","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should perform auto-recovery when enabled"},{"ancestorTitles":["BrowserHealthChecker","Auto-Recovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Auto-Recovery should not recover healthy browsers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not recover healthy browsers"},{"ancestorTitles":["BrowserHealthChecker","Auto-Recovery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Auto-Recovery should respect auto-recovery disabled setting","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect auto-recovery disabled setting"},{"ancestorTitles":["BrowserHealthChecker","Configuration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Configuration should update configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update configuration"},{"ancestorTitles":["BrowserHealthChecker","Configuration"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"BrowserHealthChecker Configuration should validate configuration values","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate configuration values"}],"endTime":1752631729883,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/browser-health-checker.test.ts","startTime":1752631728375,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Comprehensive Error System Tests","ErrorContext and Builder"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests ErrorContext and Builder should create error context with builder pattern","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should create error context with builder pattern"},{"ancestorTitles":["Comprehensive Error System Tests","ErrorContext and Builder"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests ErrorContext and Builder should apply default retry config for retryable categories","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should apply default retry config for retryable categories"},{"ancestorTitles":["Comprehensive Error System Tests","ErrorContext and Builder"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests ErrorContext and Builder should validate error context with schema","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate error context with schema"},{"ancestorTitles":["Comprehensive Error System Tests","EnhancedAppError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests EnhancedAppError should create enhanced error with context","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should create enhanced error with context"},{"ancestorTitles":["Comprehensive Error System Tests","EnhancedAppError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests EnhancedAppError should serialize to JSON correctly","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should serialize to JSON correctly"},{"ancestorTitles":["Comprehensive Error System Tests","EnhancedAppError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests EnhancedAppError should create enhanced error from regular error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create enhanced error from regular error"},{"ancestorTitles":["Comprehensive Error System Tests","Domain-Specific Errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Domain-Specific Errors should create authentication domain error","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create authentication domain error"},{"ancestorTitles":["Comprehensive Error System Tests","Domain-Specific Errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Domain-Specific Errors should create browser domain error","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create browser domain error"},{"ancestorTitles":["Comprehensive Error System Tests","Domain-Specific Errors"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Domain-Specific Errors should create network domain error","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create network domain error"},{"ancestorTitles":["Comprehensive Error System Tests","Domain-Specific Errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Domain-Specific Errors should create validation domain error","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create validation domain error"},{"ancestorTitles":["Comprehensive Error System Tests","Domain-Specific Errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Domain-Specific Errors should create resource domain error","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create resource domain error"},{"ancestorTitles":["Comprehensive Error System Tests","Error Factory"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Factory should create authentication errors","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create authentication errors"},{"ancestorTitles":["Comprehensive Error System Tests","Error Factory"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Factory should create browser errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create browser errors"},{"ancestorTitles":["Comprehensive Error System Tests","Error Factory"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Factory should create validation errors","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create validation errors"},{"ancestorTitles":["Comprehensive Error System Tests","Error Factory"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Factory should use default context when set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default context when set"},{"ancestorTitles":["Comprehensive Error System Tests","Error Serialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Serialization should serialize for REST API","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should serialize for REST API"},{"ancestorTitles":["Comprehensive Error System Tests","Error Serialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Serialization should serialize for gRPC","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should serialize for gRPC"},{"ancestorTitles":["Comprehensive Error System Tests","Error Serialization"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Serialization should serialize for WebSocket","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should serialize for WebSocket"},{"ancestorTitles":["Comprehensive Error System Tests","Error Serialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Serialization should serialize for MCP","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should serialize for MCP"},{"ancestorTitles":["Comprehensive Error System Tests","Error Serialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Serialization should handle Zod validation errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle Zod validation errors"},{"ancestorTitles":["Comprehensive Error System Tests","Error Tracking"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Tracking should track error occurrence","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should track error occurrence"},{"ancestorTitles":["Comprehensive Error System Tests","Error Tracking"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Tracking should resolve tracked errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should resolve tracked errors"},{"ancestorTitles":["Comprehensive Error System Tests","Error Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Tracking should record retry attempts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record retry attempts"},{"ancestorTitles":["Comprehensive Error System Tests","Error Tracking"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Tracking should generate error metrics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate error metrics"},{"ancestorTitles":["Comprehensive Error System Tests","Error Recovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Recovery should execute token refresh recovery strategy","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should execute token refresh recovery strategy"},{"ancestorTitles":["Comprehensive Error System Tests","Error Recovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Recovery should execute session restart recovery strategy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should execute session restart recovery strategy"},{"ancestorTitles":["Comprehensive Error System Tests","Error Recovery"],"duration":310,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Recovery should handle retry with exponential backoff","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle retry with exponential backoff"},{"ancestorTitles":["Comprehensive Error System Tests","Error Recovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Recovery should execute operation with automatic recovery","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute operation with automatic recovery"},{"ancestorTitles":["Comprehensive Error System Tests","Error Analytics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Analytics should calculate error health score","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate error health score"},{"ancestorTitles":["Comprehensive Error System Tests","Error Analytics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Analytics should analyze error trends","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should analyze error trends"},{"ancestorTitles":["Comprehensive Error System Tests","Enhanced Error Handler Middleware"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Enhanced Error Handler Middleware should handle enhanced app errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle enhanced app errors"},{"ancestorTitles":["Comprehensive Error System Tests","Enhanced Error Handler Middleware"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Enhanced Error Handler Middleware should handle Zod validation errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle Zod validation errors"},{"ancestorTitles":["Comprehensive Error System Tests","Enhanced Error Handler Middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Enhanced Error Handler Middleware should handle generic errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle generic errors"},{"ancestorTitles":["Comprehensive Error System Tests","Enhanced Error Handler Middleware"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Enhanced Error Handler Middleware should set security headers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set security headers"},{"ancestorTitles":["Comprehensive Error System Tests","Error Type Guards"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Type Guards should identify enhanced app errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should identify enhanced app errors"},{"ancestorTitles":["Comprehensive Error System Tests","Error Type Guards"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Type Guards should identify error categories and severities","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify error categories and severities"},{"ancestorTitles":["Comprehensive Error System Tests","Error Type Guards"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Type Guards should identify retryable errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should identify retryable errors"},{"ancestorTitles":["Comprehensive Error System Tests","Error Type Guards"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Error Type Guards should identify sensitive data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify sensitive data"},{"ancestorTitles":["Comprehensive Error System Tests","Integration Tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Integration Tests should work end-to-end with tracking and recovery","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should work end-to-end with tracking and recovery"},{"ancestorTitles":["Comprehensive Error System Tests","Integration Tests"],"duration":104,"failureDetails":[],"failureMessages":[],"fullName":"Comprehensive Error System Tests Integration Tests should handle error pattern detection","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle error pattern detection"}],"endTime":1752631730569,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/core/comprehensive-error-system.test.ts","startTime":1752631729888,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MCP Execute-in-Context Tool","execute-in-context tool"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MCP Execute-in-Context Tool execute-in-context tool should execute a command in a context successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should execute a command in a context successfully"},{"ancestorTitles":["MCP Execute-in-Context Tool","execute-in-context tool"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Execute-in-Context Tool execute-in-context tool should handle missing contextId","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle missing contextId"},{"ancestorTitles":["MCP Execute-in-Context Tool","execute-in-context tool"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Execute-in-Context Tool execute-in-context tool should handle missing command","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle missing command"},{"ancestorTitles":["MCP Execute-in-Context Tool","execute-in-context tool"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Execute-in-Context Tool execute-in-context tool should use session authentication when sessionId is provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use session authentication when sessionId is provided"},{"ancestorTitles":["MCP Execute-in-Context Tool","execute-in-context tool"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Execute-in-Context Tool execute-in-context tool should handle REST adapter errors gracefully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle REST adapter errors gracefully"},{"ancestorTitles":["MCP Execute-in-Context Tool","execute-in-context tool"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Execute-in-Context Tool execute-in-context tool should handle unparseable response gracefully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle unparseable response gracefully"}],"endTime":1752631730696,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/execute-in-context-tool.test.ts","startTime":1752631729535,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Browser Pool Integration"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"Browser Pool Integration should integrate browser pool with health monitor","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should integrate browser pool with health monitor"},{"ancestorTitles":["Browser Pool Integration"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"Browser Pool Integration should handle unhealthy browsers with health monitor","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle unhealthy browsers with health monitor"},{"ancestorTitles":["Browser Pool Integration"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Browser Pool Integration should demonstrate browser health monitoring","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should demonstrate browser health monitoring"},{"ancestorTitles":["Browser Pool Integration"],"duration":52,"failureDetails":[],"failureMessages":[],"fullName":"Browser Pool Integration should handle multiple browsers with health checks","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle multiple browsers with health checks"},{"ancestorTitles":["Browser Pool Integration"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"Browser Pool Integration should demonstrate complete lifecycle with monitoring","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should demonstrate complete lifecycle with monitoring"}],"endTime":1752631730985,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/integration.test.ts","startTime":1752631730574,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MCP Server Session Management","createSessionTool"],"duration":67,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management createSessionTool should create a session with valid credentials","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should create a session with valid credentials"},{"ancestorTitles":["MCP Server Session Management","createSessionTool"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management createSessionTool should fail with invalid credentials","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fail with invalid credentials"},{"ancestorTitles":["MCP Server Session Management","createSessionTool"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management createSessionTool should fail with missing credentials","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail with missing credentials"},{"ancestorTitles":["MCP Server Session Management","createSessionTool"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management createSessionTool should create session with default duration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create session with default duration"},{"ancestorTitles":["MCP Server Session Management","listSessionsTool"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management listSessionsTool should list sessions for a user","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should list sessions for a user"},{"ancestorTitles":["MCP Server Session Management","listSessionsTool"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management listSessionsTool should return empty array for user with no sessions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for user with no sessions"},{"ancestorTitles":["MCP Server Session Management","deleteSessionTool"],"duration":68,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management deleteSessionTool should delete an existing session","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should delete an existing session"},{"ancestorTitles":["MCP Server Session Management","deleteSessionTool"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management deleteSessionTool should fail to delete non-existent session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail to delete non-existent session"},{"ancestorTitles":["MCP Server Session Management","deleteSessionTool"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management deleteSessionTool should fail with missing session ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail with missing session ID"},{"ancestorTitles":["MCP Server Session Management","createBrowserContextTool"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management createBrowserContextTool should create browser context with valid session","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should create browser context with valid session"},{"ancestorTitles":["MCP Server Session Management","createBrowserContextTool"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management createBrowserContextTool should fail with invalid session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail with invalid session"},{"ancestorTitles":["MCP Server Session Management","createBrowserContextTool"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management createBrowserContextTool should fail with missing session ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail with missing session ID"},{"ancestorTitles":["MCP Server Session Management","Authentication Flow"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Session Management Authentication Flow should support full authentication workflow","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should support full authentication workflow"}],"endTime":1752631731498,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/server.test.ts","startTime":1752631730704,"status":"focused","summary":""},{"assertionResults":[{"ancestorTitles":["Request/Response Logger Middleware","Basic Functionality"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Basic Functionality should log request and response with standard verbosity","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should log request and response with standard verbosity"},{"ancestorTitles":["Request/Response Logger Middleware","Basic Functionality"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Basic Functionality should assign request ID if not present","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should assign request ID if not present"},{"ancestorTitles":["Request/Response Logger Middleware","Basic Functionality"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Basic Functionality should use existing request ID from header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use existing request ID from header"},{"ancestorTitles":["Request/Response Logger Middleware","Verbosity Levels"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Verbosity Levels should log minimal information with MINIMAL verbosity","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should log minimal information with MINIMAL verbosity"},{"ancestorTitles":["Request/Response Logger Middleware","Verbosity Levels"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Verbosity Levels should log headers with VERBOSE verbosity","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log headers with VERBOSE verbosity"},{"ancestorTitles":["Request/Response Logger Middleware","Verbosity Levels"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Verbosity Levels should log request body with VERBOSE verbosity","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log request body with VERBOSE verbosity"},{"ancestorTitles":["Request/Response Logger Middleware","Verbosity Levels"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Verbosity Levels should log response body with DEBUG verbosity","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log response body with DEBUG verbosity"},{"ancestorTitles":["Request/Response Logger Middleware","Sensitive Data Redaction"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Sensitive Data Redaction should redact sensitive headers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should redact sensitive headers"},{"ancestorTitles":["Request/Response Logger Middleware","Sensitive Data Redaction"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Sensitive Data Redaction should redact sensitive body fields","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should redact sensitive body fields"},{"ancestorTitles":["Request/Response Logger Middleware","Sensitive Data Redaction"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Sensitive Data Redaction should respect custom sensitive fields","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should respect custom sensitive fields"},{"ancestorTitles":["Request/Response Logger Middleware","Performance Monitoring"],"duration":114,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Performance Monitoring should detect slow requests","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect slow requests"},{"ancestorTitles":["Request/Response Logger Middleware","Performance Monitoring"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Performance Monitoring should use high precision timing when enabled","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use high precision timing when enabled"},{"ancestorTitles":["Request/Response Logger Middleware","Filtering"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Filtering should skip logging for specified paths","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip logging for specified paths"},{"ancestorTitles":["Request/Response Logger Middleware","Filtering"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Filtering should skip logging for specified methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip logging for specified methods"},{"ancestorTitles":["Request/Response Logger Middleware","Filtering"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Filtering should log only errors when errorsOnly is true","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should log only errors when errorsOnly is true"},{"ancestorTitles":["Request/Response Logger Middleware","Content Type Filtering"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Content Type Filtering should log body only for specified content types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log body only for specified content types"},{"ancestorTitles":["Request/Response Logger Middleware","Content Type Filtering"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Content Type Filtering should not log body for non-matching content types","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not log body for non-matching content types"},{"ancestorTitles":["Request/Response Logger Middleware","Error Handling"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Error Handling should log errors during request processing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log errors during request processing"},{"ancestorTitles":["Request/Response Logger Middleware","Error Handling"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Error Handling should handle parsing errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle parsing errors gracefully"},{"ancestorTitles":["Request/Response Logger Middleware","Audit Logging"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Audit Logging should log security events when audit logging is enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log security events when audit logging is enabled"},{"ancestorTitles":["Request/Response Logger Middleware","Audit Logging"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Audit Logging should not log security events when audit logging is disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not log security events when audit logging is disabled"},{"ancestorTitles":["Request/Response Logger Middleware","Custom Metadata"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Custom Metadata should include custom metadata when provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should include custom metadata when provided"},{"ancestorTitles":["Request/Response Logger Middleware","Body Size Limits"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Body Size Limits should truncate large bodies","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should truncate large bodies"},{"ancestorTitles":["Request/Response Logger Middleware","Preset Configurations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Preset Configurations should use production preset correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use production preset correctly"},{"ancestorTitles":["Request/Response Logger Middleware","Preset Configurations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Preset Configurations should use development preset correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use development preset correctly"},{"ancestorTitles":["Request/Response Logger Middleware","Preset Configurations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Preset Configurations should use security preset correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use security preset correctly"},{"ancestorTitles":["Request/Response Logger Middleware","Preset Configurations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Preset Configurations should use performance preset correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use performance preset correctly"},{"ancestorTitles":["Request/Response Logger Middleware","User Context"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware User Context should include user information when available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include user information when available"},{"ancestorTitles":["Request/Response Logger Middleware","Response Levels"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Response Levels should use error level for 5xx responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use error level for 5xx responses"},{"ancestorTitles":["Request/Response Logger Middleware","Response Levels"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Response Levels should use warn level for 4xx responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use warn level for 4xx responses"},{"ancestorTitles":["Request/Response Logger Middleware","Response Levels"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Request/Response Logger Middleware Response Levels should use info level for 2xx responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use info level for 2xx responses"}],"endTime":1752631731605,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/core/middleware/request-response-logger.test.ts","startTime":1752631730989,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["InMemorySessionStore","create"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore create should create a new session and return ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a new session and return ID"},{"ancestorTitles":["InMemorySessionStore","get"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore get should retrieve an existing session","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should retrieve an existing session"},{"ancestorTitles":["InMemorySessionStore","get"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore get should return null for non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent session"},{"ancestorTitles":["InMemorySessionStore","get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore get should return null for expired session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for expired session"},{"ancestorTitles":["InMemorySessionStore","update"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore update should update existing session","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update existing session"},{"ancestorTitles":["InMemorySessionStore","update"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore update should return null when updating non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when updating non-existent session"},{"ancestorTitles":["InMemorySessionStore","delete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore delete should delete existing session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete existing session"},{"ancestorTitles":["InMemorySessionStore","delete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore delete should return false when deleting non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when deleting non-existent session"},{"ancestorTitles":["InMemorySessionStore","deleteExpired"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore deleteExpired should delete all expired sessions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete all expired sessions"},{"ancestorTitles":["InMemorySessionStore","getByUserId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore getByUserId should return all sessions for a user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return all sessions for a user"},{"ancestorTitles":["InMemorySessionStore","getByUserId"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore getByUserId should return empty array for user with no sessions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for user with no sessions"},{"ancestorTitles":["InMemorySessionStore","exists"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore exists should return true for existing session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for existing session"},{"ancestorTitles":["InMemorySessionStore","exists"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore exists should return false for non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for non-existent session"},{"ancestorTitles":["InMemorySessionStore","touch"],"duration":101,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore touch should update lastAccessedAt for existing session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update lastAccessedAt for existing session"},{"ancestorTitles":["InMemorySessionStore","touch"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InMemorySessionStore touch should return false for non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for non-existent session"}],"endTime":1752631731870,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/store/in-memory-session-store.test.ts","startTime":1752631731609,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MCP Server","Server Initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Server Initialization should create server with correct metadata","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create server with correct metadata"},{"ancestorTitles":["MCP Server","Server Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Server Initialization should log server startup","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log server startup"},{"ancestorTitles":["MCP Server","Tool Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Tool Registration should register execute-api tool","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register execute-api tool"},{"ancestorTitles":["MCP Server","Tool Registration"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Tool Registration should register session management tools","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register session management tools"},{"ancestorTitles":["MCP Server","Tool Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Tool Registration should register browser context tools","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register browser context tools"},{"ancestorTitles":["MCP Server","Resource Registration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Resource Registration should register API catalog resource","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register API catalog resource"},{"ancestorTitles":["MCP Server","Resource Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Resource Registration should register health resource","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register health resource"},{"ancestorTitles":["MCP Server","Tool Execution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Tool Execution should handle create-session tool call","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle create-session tool call"},{"ancestorTitles":["MCP Server","Tool Execution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Tool Execution should handle unknown tool error gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unknown tool error gracefully"},{"ancestorTitles":["MCP Server","Resource Access"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Resource Access should return API catalog","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return API catalog"},{"ancestorTitles":["MCP Server","Resource Access"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Resource Access should return system health","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return system health"},{"ancestorTitles":["MCP Server","Transport Support"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Transport Support should support stdio transport","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should support stdio transport"},{"ancestorTitles":["MCP Server","Transport Support"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Transport Support should support HTTP transport","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should support HTTP transport"},{"ancestorTitles":["MCP Server","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Error Handling should log errors during tool execution","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should log errors during tool execution"},{"ancestorTitles":["MCP Server","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Server Error Handling should handle resource not found errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle resource not found errors"}],"endTime":1752631732104,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/mcp-server.test.ts","startTime":1752631731503,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CLI Module","CLI Commands"],"duration":54,"failureDetails":[],"failureMessages":[],"fullName":"CLI Module CLI Commands should display version information","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should display version information"},{"ancestorTitles":["CLI Module","CLI Commands"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"CLI Module CLI Commands should display help information","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should display help information"},{"ancestorTitles":["CLI Module","CLI Commands"],"duration":77,"failureDetails":[],"failureMessages":[],"fullName":"CLI Module CLI Commands should validate configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate configuration"},{"ancestorTitles":["CLI Module","Package.json Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CLI Module Package.json Integration should have correct bin entry in package.json","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have correct bin entry in package.json"},{"ancestorTitles":["CLI Module","Package.json Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CLI Module Package.json Integration should have correct npm script","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have correct npm script"}],"endTime":1752631732190,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/cli/index.test.ts","startTime":1752631731874,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing Best Practices Examples","Async Operations"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Async Operations should handle async operations correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle async operations correctly"},{"ancestorTitles":["Testing Best Practices Examples","Async Operations"],"duration":51,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Async Operations should measure execution time","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should measure execution time"},{"ancestorTitles":["Testing Best Practices Examples","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Error Handling should test promise rejections","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should test promise rejections"},{"ancestorTitles":["Testing Best Practices Examples","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Error Handling should handle errors with custom properties","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle errors with custom properties"},{"ancestorTitles":["Testing Best Practices Examples","Mock Testing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Mock Testing should use mock request and response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use mock request and response"},{"ancestorTitles":["Testing Best Practices Examples","Mock Testing"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Mock Testing should test JWT token creation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should test JWT token creation"},{"ancestorTitles":["Testing Best Practices Examples","Custom Matchers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Custom Matchers should use custom matchers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use custom matchers"},{"ancestorTitles":["Testing Best Practices Examples","Custom Matchers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Custom Matchers should test mock calls with partial matching","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should test mock calls with partial matching"},{"ancestorTitles":["Testing Best Practices Examples","Parameterized Tests"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Parameterized Tests should classify 0 as zero","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify 0 as zero"},{"ancestorTitles":["Testing Best Practices Examples","Parameterized Tests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Parameterized Tests should classify 1 as positive","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify 1 as positive"},{"ancestorTitles":["Testing Best Practices Examples","Parameterized Tests"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Parameterized Tests should classify -1 as negative","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify -1 as negative"},{"ancestorTitles":["Testing Best Practices Examples","Spy and Mock Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Spy and Mock Functions should spy on console methods","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should spy on console methods"},{"ancestorTitles":["Testing Best Practices Examples","Spy and Mock Functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Spy and Mock Functions should mock module dependencies","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should mock module dependencies"},{"ancestorTitles":["Testing Best Practices Examples","Snapshot Testing"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Snapshot Testing should match object snapshot","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should match object snapshot"},{"ancestorTitles":["Testing Best Practices Examples","Performance Testing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing Best Practices Examples Performance Testing should complete within performance budget","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should complete within performance budget"}],"endTime":1752631732336,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/utils/test-examples.test.ts","startTime":1752631732111,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["gRPC Interceptors","authInterceptor"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors authInterceptor should authenticate successfully with valid token","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should authenticate successfully with valid token"},{"ancestorTitles":["gRPC Interceptors","authInterceptor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors authInterceptor should reject request without token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject request without token"},{"ancestorTitles":["gRPC Interceptors","authInterceptor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors authInterceptor should reject request with invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject request with invalid token"},{"ancestorTitles":["gRPC Interceptors","authInterceptor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors authInterceptor should reject request with expired session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject request with expired session"},{"ancestorTitles":["gRPC Interceptors","authInterceptor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors authInterceptor should support API key authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should support API key authentication"},{"ancestorTitles":["gRPC Interceptors","loggingInterceptor"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors loggingInterceptor should log successful requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log successful requests"},{"ancestorTitles":["gRPC Interceptors","loggingInterceptor"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors loggingInterceptor should log failed requests","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log failed requests"},{"ancestorTitles":["gRPC Interceptors","loggingInterceptor"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors loggingInterceptor should add request ID if not present","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add request ID if not present"},{"ancestorTitles":["gRPC Interceptors","errorInterceptor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors errorInterceptor should handle AppError correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle AppError correctly"},{"ancestorTitles":["gRPC Interceptors","errorInterceptor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors errorInterceptor should handle generic errors in production","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle generic errors in production"},{"ancestorTitles":["gRPC Interceptors","errorInterceptor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors errorInterceptor should expose error details in development","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should expose error details in development"},{"ancestorTitles":["gRPC Interceptors","errorInterceptor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"gRPC Interceptors errorInterceptor should map error codes correctly","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should map error codes correctly"}],"endTime":1752631732475,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/grpc/interceptors.test.ts","startTime":1752631732197,"status":"focused","summary":""},{"assertionResults":[{"ancestorTitles":["SessionStoreFactory","create"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should create Redis store when Redis is available and preferred","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create Redis store when Redis is available and preferred"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should create in-memory store when memory is preferred","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create in-memory store when memory is preferred"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should fallback to memory store when Redis is preferred but unavailable","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should fallback to memory store when Redis is preferred but unavailable"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should auto-select Redis store when available","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should auto-select Redis store when available"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should auto-select memory store when Redis is unavailable","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should auto-select memory store when Redis is unavailable"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should create monitoring when enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create monitoring when enabled"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should create replication when enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create replication when enabled"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should create migration utilities when enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create migration utilities when enabled"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should throw error when creating duplicate instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when creating duplicate instance"},{"ancestorTitles":["SessionStoreFactory","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory create should create default instance when no instanceId provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create default instance when no instanceId provided"},{"ancestorTitles":["SessionStoreFactory","get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory get should return existing instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return existing instance"},{"ancestorTitles":["SessionStoreFactory","get"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory get should return undefined for non-existent instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined for non-existent instance"},{"ancestorTitles":["SessionStoreFactory","get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory get should return default instance when no instanceId provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default instance when no instanceId provided"},{"ancestorTitles":["SessionStoreFactory","list"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory list should return all instances","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return all instances"},{"ancestorTitles":["SessionStoreFactory","list"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory list should return empty array when no instances exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no instances exist"},{"ancestorTitles":["SessionStoreFactory","destroy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory destroy should destroy existing instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should destroy existing instance"},{"ancestorTitles":["SessionStoreFactory","destroy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory destroy should throw error when destroying non-existent instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when destroying non-existent instance"},{"ancestorTitles":["SessionStoreFactory","destroy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory destroy should clean up monitoring when destroying instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clean up monitoring when destroying instance"},{"ancestorTitles":["SessionStoreFactory","destroy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory destroy should clean up replication when destroying instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clean up replication when destroying instance"},{"ancestorTitles":["SessionStoreFactory","destroyAll"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory destroyAll should destroy all instances","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should destroy all instances"},{"ancestorTitles":["SessionStoreFactory","migrate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory migrate should migrate sessions between stores","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should migrate sessions between stores"},{"ancestorTitles":["SessionStoreFactory","migrate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory migrate should throw error when source instance not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when source instance not found"},{"ancestorTitles":["SessionStoreFactory","migrate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory migrate should throw error when target instance not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when target instance not found"},{"ancestorTitles":["SessionStoreFactory","migrate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory migrate should throw error when migration not enabled for source","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when migration not enabled for source"},{"ancestorTitles":["SessionStoreFactory","getHealthStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory getHealthStatus should return health status for all instances","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return health status for all instances"},{"ancestorTitles":["SessionStoreFactory","getHealthStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory getHealthStatus should return overall degraded status when some instances are degraded","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return overall degraded status when some instances are degraded"},{"ancestorTitles":["SessionStoreFactory","getStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory getStatus should return factory status","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return factory status"},{"ancestorTitles":["SessionStoreFactory","switchStoreType"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory switchStoreType should switch from memory to redis when redis becomes available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should switch from memory to redis when redis becomes available"},{"ancestorTitles":["SessionStoreFactory","switchStoreType"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory switchStoreType should switch from redis to memory","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should switch from redis to memory"},{"ancestorTitles":["SessionStoreFactory","switchStoreType"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory switchStoreType should throw error when switching to redis but redis is unavailable","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when switching to redis but redis is unavailable"},{"ancestorTitles":["SessionStoreFactory","switchStoreType"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory switchStoreType should do nothing when switching to same store type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should do nothing when switching to same store type"},{"ancestorTitles":["SessionStoreFactory","createBackup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory createBackup should create backup of session data","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create backup of session data"},{"ancestorTitles":["SessionStoreFactory","createBackup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory createBackup should throw error when migration not enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when migration not enabled"},{"ancestorTitles":["SessionStoreFactory","restoreBackup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory restoreBackup should restore sessions from backup","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should restore sessions from backup"},{"ancestorTitles":["SessionStoreFactory","restoreBackup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionStoreFactory restoreBackup should throw error when migration not enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when migration not enabled"}],"endTime":1752631732584,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/store/session-store-factory.test.ts","startTime":1752631732342,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Health Router","GET /health"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Health Router GET /health should return 200 with health status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 200 with health status"},{"ancestorTitles":["Health Router","GET /health"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Health Router GET /health should return valid timestamp","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return valid timestamp"},{"ancestorTitles":["Health Router","GET /health/live"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Health Router GET /health/live should return 200 with alive status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 200 with alive status"},{"ancestorTitles":["Health Router","GET /health/ready"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Health Router GET /health/ready should return 200 when all checks pass","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 200 when all checks pass"}],"endTime":1752631732719,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/routes/health.test.ts","startTime":1752631732480,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["WebSocketAdapter","executeRequest"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter executeRequest should handle subscribe operation","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle subscribe operation"},{"ancestorTitles":["WebSocketAdapter","executeRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter executeRequest should handle unsubscribe operation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle unsubscribe operation"},{"ancestorTitles":["WebSocketAdapter","executeRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter executeRequest should handle send operation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle send operation"},{"ancestorTitles":["WebSocketAdapter","executeRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter executeRequest should handle broadcast operation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle broadcast operation"},{"ancestorTitles":["WebSocketAdapter","executeRequest"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter executeRequest should throw error for invalid operation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid operation"},{"ancestorTitles":["WebSocketAdapter","executeRequest"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter executeRequest should throw error for missing topic in subscribe","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for missing topic in subscribe"},{"ancestorTitles":["WebSocketAdapter","listEndpoints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter listEndpoints should return available WebSocket operations","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return available WebSocket operations"},{"ancestorTitles":["WebSocketAdapter","getCapabilities"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter getCapabilities should return WebSocket capabilities","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return WebSocket capabilities"},{"ancestorTitles":["WebSocketAdapter","message handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter message handling should handle response messages","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle response messages"},{"ancestorTitles":["WebSocketAdapter","message handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter message handling should handle event messages for subscriptions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle event messages for subscriptions"},{"ancestorTitles":["WebSocketAdapter","message handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter message handling should handle error messages","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle error messages"},{"ancestorTitles":["WebSocketAdapter","connection management"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter connection management should clean up connection on close","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should clean up connection on close"},{"ancestorTitles":["WebSocketAdapter","connection management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter connection management should reuse existing open connection","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reuse existing open connection"},{"ancestorTitles":["WebSocketAdapter","streaming response"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WebSocketAdapter streaming response should create streaming response generator","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create streaming response generator"}],"endTime":1752631732785,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/ws-adapter.test.ts","startTime":1752631732588,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PageManager","createPage"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PageManager createPage should create a new page successfully","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should create a new page successfully"},{"ancestorTitles":["PageManager","createPage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager createPage should create page with options","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create page with options"},{"ancestorTitles":["PageManager","createPage"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"PageManager createPage should throw error if context not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if context not found"},{"ancestorTitles":["PageManager","createPage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager createPage should throw error if context does not belong to session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if context does not belong to session"},{"ancestorTitles":["PageManager","createPage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager createPage should emit page:created event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit page:created event"},{"ancestorTitles":["PageManager","getPage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager getPage should return page for valid session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return page for valid session"},{"ancestorTitles":["PageManager","getPage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager getPage should return undefined for non-existent page","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined for non-existent page"},{"ancestorTitles":["PageManager","getPage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager getPage should throw error for unauthorized session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unauthorized session"},{"ancestorTitles":["PageManager","getPageInfo"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager getPageInfo should return page info for valid session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return page info for valid session"},{"ancestorTitles":["PageManager","getPageInfo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager getPageInfo should return undefined for non-existent page","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined for non-existent page"},{"ancestorTitles":["PageManager","listPagesForContext"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager listPagesForContext should list pages for context","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should list pages for context"},{"ancestorTitles":["PageManager","listPagesForContext"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager listPagesForContext should throw error for unauthorized session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unauthorized session"},{"ancestorTitles":["PageManager","listPagesForSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager listPagesForSession should list all pages for session","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should list all pages for session"},{"ancestorTitles":["PageManager","navigateTo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager navigateTo should navigate page to URL","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should navigate page to URL"},{"ancestorTitles":["PageManager","navigateTo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager navigateTo should navigate with custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should navigate with custom options"},{"ancestorTitles":["PageManager","navigateTo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager navigateTo should handle navigation errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle navigation errors"},{"ancestorTitles":["PageManager","navigateTo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager navigateTo should emit navigation events","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit navigation events"},{"ancestorTitles":["PageManager","closePage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager closePage should close page successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close page successfully"},{"ancestorTitles":["PageManager","closePage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager closePage should emit page:closed event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit page:closed event"},{"ancestorTitles":["PageManager","closePage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager closePage should handle page close errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle page close errors gracefully"},{"ancestorTitles":["PageManager","closePagesForContext"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"PageManager closePagesForContext should close all pages for context","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close all pages for context"},{"ancestorTitles":["PageManager","closePagesForContext"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager closePagesForContext should emit context:pages-cleared event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit context:pages-cleared event"},{"ancestorTitles":["PageManager","closePagesForSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager closePagesForSession should close all pages for session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close all pages for session"},{"ancestorTitles":["PageManager","closePagesForSession"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PageManager closePagesForSession should emit session:pages-cleared event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit session:pages-cleared event"},{"ancestorTitles":["PageManager","takeScreenshot"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PageManager takeScreenshot should take screenshot with default options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should take screenshot with default options"},{"ancestorTitles":["PageManager","takeScreenshot"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager takeScreenshot should take screenshot with custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should take screenshot with custom options"},{"ancestorTitles":["PageManager","setCookies and getCookies"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager setCookies and getCookies should set cookies on page","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set cookies on page"},{"ancestorTitles":["PageManager","setCookies and getCookies"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager setCookies and getCookies should get cookies from page","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get cookies from page"},{"ancestorTitles":["PageManager","clearPageData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager clearPageData should clear all data by default","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should clear all data by default"},{"ancestorTitles":["PageManager","clearPageData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager clearPageData should clear only specified data types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should clear only specified data types"},{"ancestorTitles":["PageManager","getPageMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PageManager getPageMetrics should return page metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return page metrics"},{"ancestorTitles":["PageManager","isPageActive"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PageManager isPageActive should return true for active page","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for active page"},{"ancestorTitles":["PageManager","isPageActive"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager isPageActive should return false for non-existent page","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for non-existent page"},{"ancestorTitles":["PageManager","cleanupIdlePages"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager cleanupIdlePages should clean up idle pages","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should clean up idle pages"},{"ancestorTitles":["PageManager","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager error handling should handle browser pool errors during page creation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle browser pool errors during page creation"},{"ancestorTitles":["PageManager","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager error handling should handle page configuration errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle page configuration errors"},{"ancestorTitles":["PageManager","event emission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PageManager event emission should emit page:error event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit page:error event"},{"ancestorTitles":["PageManager","event emission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PageManager event emission should emit page:state-changed event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit page:state-changed event"}],"endTime":1752631732975,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/page-manager.test.ts","startTime":1752631732726,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BrowserActionExecutor","Constructor"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor Constructor should initialize with default handlers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with default handlers"},{"ancestorTitles":["BrowserActionExecutor","isActionSupported"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor isActionSupported should return true for supported actions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return true for supported actions"},{"ancestorTitles":["BrowserActionExecutor","isActionSupported"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor isActionSupported should return false for unsupported actions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false for unsupported actions"},{"ancestorTitles":["BrowserActionExecutor","registerHandler and unregisterHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor registerHandler and unregisterHandler should register custom handler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should register custom handler"},{"ancestorTitles":["BrowserActionExecutor","registerHandler and unregisterHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor registerHandler and unregisterHandler should unregister handler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should unregister handler"},{"ancestorTitles":["BrowserActionExecutor","validate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor validate should validate supported actions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate supported actions"},{"ancestorTitles":["BrowserActionExecutor","validate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor validate should return error for unsupported actions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return error for unsupported actions"},{"ancestorTitles":["BrowserActionExecutor","validate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor validate should handle validation errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle validation errors"},{"ancestorTitles":["BrowserActionExecutor","validateBatch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor validateBatch should validate multiple actions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate multiple actions"},{"ancestorTitles":["BrowserActionExecutor","validateBatch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor validateBatch should handle batch validation errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle batch validation errors"},{"ancestorTitles":["BrowserActionExecutor","execute"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor execute should execute valid action successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute valid action successfully"},{"ancestorTitles":["BrowserActionExecutor","execute"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor execute should fail execution for invalid action","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail execution for invalid action"},{"ancestorTitles":["BrowserActionExecutor","execute"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor execute should handle page not found error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle page not found error"},{"ancestorTitles":["BrowserActionExecutor","execute"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor execute should handle handler execution errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle handler execution errors"},{"ancestorTitles":["BrowserActionExecutor","executeBatch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor executeBatch should execute multiple actions sequentially","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute multiple actions sequentially"},{"ancestorTitles":["BrowserActionExecutor","executeBatch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor executeBatch should stop on error when stopOnError is true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should stop on error when stopOnError is true"},{"ancestorTitles":["BrowserActionExecutor","executeBatch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor executeBatch should execute actions in parallel when parallel is true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute actions in parallel when parallel is true"},{"ancestorTitles":["BrowserActionExecutor","executeBatch"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor executeBatch should reject too many actions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject too many actions"},{"ancestorTitles":["BrowserActionExecutor","getHistory"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor getHistory should return empty history for new context","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty history for new context"},{"ancestorTitles":["BrowserActionExecutor","getHistory"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor getHistory should return action history with filtering","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return action history with filtering"},{"ancestorTitles":["BrowserActionExecutor","getMetrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor getMetrics should return empty metrics for new context","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return empty metrics for new context"},{"ancestorTitles":["BrowserActionExecutor","clearHistory"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BrowserActionExecutor clearHistory should clear all history when no date provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear all history when no date provided"}],"endTime":1752631733010,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/action-executor.test.ts","startTime":1752631732791,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["JWT Utilities","generateToken"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities generateToken should generate a valid JWT token","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should generate a valid JWT token"},{"ancestorTitles":["JWT Utilities","generateToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities generateToken should set expiration time","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should set expiration time"},{"ancestorTitles":["JWT Utilities","generateTokenPair"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities generateTokenPair should generate both access and refresh tokens","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should generate both access and refresh tokens"},{"ancestorTitles":["JWT Utilities","generateTokenPair"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities generateTokenPair should have different expiry times for access and refresh tokens","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have different expiry times for access and refresh tokens"},{"ancestorTitles":["JWT Utilities","verifyToken"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities verifyToken should verify a valid token","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should verify a valid token"},{"ancestorTitles":["JWT Utilities","verifyToken"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities verifyToken should verify token type when specified","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should verify token type when specified"},{"ancestorTitles":["JWT Utilities","verifyToken"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities verifyToken should throw error for wrong token type","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for wrong token type"},{"ancestorTitles":["JWT Utilities","verifyToken"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities verifyToken should throw error for expired token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for expired token"},{"ancestorTitles":["JWT Utilities","verifyToken"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities verifyToken should throw error for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid token"},{"ancestorTitles":["JWT Utilities","verifyToken"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities verifyToken should throw error for token with invalid payload","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for token with invalid payload"},{"ancestorTitles":["JWT Utilities","extractTokenFromHeader"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities extractTokenFromHeader should extract token from valid Bearer header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract token from valid Bearer header"},{"ancestorTitles":["JWT Utilities","extractTokenFromHeader"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities extractTokenFromHeader should return null for missing header","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for missing header"},{"ancestorTitles":["JWT Utilities","extractTokenFromHeader"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities extractTokenFromHeader should return null for invalid header format","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return null for invalid header format"},{"ancestorTitles":["JWT Utilities","isTokenExpiringSoon"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities isTokenExpiringSoon should return true for token expiring within threshold","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for token expiring within threshold"},{"ancestorTitles":["JWT Utilities","isTokenExpiringSoon"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities isTokenExpiringSoon should return false for token not expiring soon","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for token not expiring soon"},{"ancestorTitles":["JWT Utilities","isTokenExpiringSoon"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities isTokenExpiringSoon should return true for invalid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for invalid token"},{"ancestorTitles":["JWT Utilities","isTokenExpiringSoon"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JWT Utilities isTokenExpiringSoon should use default threshold of 5 minutes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default threshold of 5 minutes"}],"endTime":1752631733197,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/auth/jwt.test.ts","startTime":1752631732981,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MCP Transport Layer","Transport Type Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer Transport Type Detection should default to stdio transport","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should default to stdio transport"},{"ancestorTitles":["MCP Transport Layer","Transport Type Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer Transport Type Detection should detect stdio transport from environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect stdio transport from environment"},{"ancestorTitles":["MCP Transport Layer","Transport Type Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer Transport Type Detection should detect HTTP transport from environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect HTTP transport from environment"},{"ancestorTitles":["MCP Transport Layer","Transport Type Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer Transport Type Detection should detect HTTP transport from websocket alias","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect HTTP transport from websocket alias"},{"ancestorTitles":["MCP Transport Layer","Transport Type Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer Transport Type Detection should detect HTTP transport from ws alias","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect HTTP transport from ws alias"},{"ancestorTitles":["MCP Transport Layer","StdioTransport"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer StdioTransport should create stdio transport instance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create stdio transport instance"},{"ancestorTitles":["MCP Transport Layer","StdioTransport"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer StdioTransport should handle stdin errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle stdin errors"},{"ancestorTitles":["MCP Transport Layer","StdioTransport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer StdioTransport should handle stdout errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle stdout errors"},{"ancestorTitles":["MCP Transport Layer","StdioTransport"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer StdioTransport should handle SIGINT signal","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle SIGINT signal"},{"ancestorTitles":["MCP Transport Layer","StdioTransport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer StdioTransport should handle SIGTERM signal","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle SIGTERM signal"},{"ancestorTitles":["MCP Transport Layer","StdioTransport"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer StdioTransport should close transport gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should close transport gracefully"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should create HTTP transport with default config","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create HTTP transport with default config"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should create HTTP transport with custom config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create HTTP transport with custom config"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should create HTTPS transport when TLS enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create HTTPS transport when TLS enabled"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should throw error when TLS enabled without cert paths","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when TLS enabled without cert paths"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should start HTTP transport","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should start HTTP transport"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should handle WebSocket connections","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle WebSocket connections"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should handle WebSocket errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle WebSocket errors"},{"ancestorTitles":["MCP Transport Layer","HttpTransport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer HttpTransport should stop HTTP transport gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should stop HTTP transport gracefully"},{"ancestorTitles":["MCP Transport Layer","Factory Functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer Factory Functions should create stdio transport using factory","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create stdio transport using factory"},{"ancestorTitles":["MCP Transport Layer","Factory Functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCP Transport Layer Factory Functions should create HTTP transport using factory","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create HTTP transport using factory"}],"endTime":1752631733205,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/transport.test.ts","startTime":1752631733015,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SessionService","createSession"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionService createSession should create a new session successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a new session successfully"},{"ancestorTitles":["SessionService","createSession"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionService createSession should fail when user_id is missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail when user_id is missing"},{"ancestorTitles":["SessionService","createSession"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionService createSession should use default TTL when not specified","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default TTL when not specified"},{"ancestorTitles":["SessionService","getSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService getSession should get session successfully for owner","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get session successfully for owner"},{"ancestorTitles":["SessionService","getSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService getSession should allow admin to get any session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow admin to get any session"},{"ancestorTitles":["SessionService","getSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService getSession should deny access to other users sessions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deny access to other users sessions"},{"ancestorTitles":["SessionService","getSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService getSession should return error for non-existent session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return error for non-existent session"},{"ancestorTitles":["SessionService","updateSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService updateSession should update session data successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update session data successfully"},{"ancestorTitles":["SessionService","updateSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService updateSession should update session with TTL extension","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update session with TTL extension"},{"ancestorTitles":["SessionService","deleteSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService deleteSession should delete session successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should delete session successfully"},{"ancestorTitles":["SessionService","deleteSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService deleteSession should deny deletion by non-owner","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deny deletion by non-owner"},{"ancestorTitles":["SessionService","refreshSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService refreshSession should refresh session successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should refresh session successfully"},{"ancestorTitles":["SessionService","refreshSession"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionService refreshSession should fail with invalid refresh token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail with invalid refresh token"},{"ancestorTitles":["SessionService","validateSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService validateSession should validate session by ID successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate session by ID successfully"},{"ancestorTitles":["SessionService","validateSession"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionService validateSession should return invalid for expired session","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return invalid for expired session"}],"endTime":1752631733417,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/grpc/session.service.test.ts","startTime":1752631733210,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MCPAuthBridge","authenticate"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate should reject when no auth credentials provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject when no auth credentials provided"},{"ancestorTitles":["MCPAuthBridge","authenticate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate should reject invalid authentication type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid authentication type"},{"ancestorTitles":["MCPAuthBridge","authenticate","JWT authentication"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate JWT authentication should authenticate valid JWT token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should authenticate valid JWT token"},{"ancestorTitles":["MCPAuthBridge","authenticate","JWT authentication"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate JWT authentication should handle Bearer token format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Bearer token format"},{"ancestorTitles":["MCPAuthBridge","authenticate","JWT authentication"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate JWT authentication should reject invalid JWT token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid JWT token"},{"ancestorTitles":["MCPAuthBridge","authenticate","JWT authentication"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate JWT authentication should reject expired JWT token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject expired JWT token"},{"ancestorTitles":["MCPAuthBridge","authenticate","API key authentication"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate API key authentication should authenticate valid API key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should authenticate valid API key"},{"ancestorTitles":["MCPAuthBridge","authenticate","API key authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate API key authentication should reject invalid API key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid API key"},{"ancestorTitles":["MCPAuthBridge","authenticate","API key authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate API key authentication should reject revoked API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject revoked API key"},{"ancestorTitles":["MCPAuthBridge","authenticate","Session authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate Session authentication should authenticate valid session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should authenticate valid session"},{"ancestorTitles":["MCPAuthBridge","authenticate","Session authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate Session authentication should reject invalid session","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid session"},{"ancestorTitles":["MCPAuthBridge","authenticate","Session authentication"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate Session authentication should reject expired session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject expired session"},{"ancestorTitles":["MCPAuthBridge","authenticate","Session authentication"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge authenticate Session authentication should touch session on successful authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should touch session on successful authentication"},{"ancestorTitles":["MCPAuthBridge","hasToolPermission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge hasToolPermission should return true when user has required permission","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when user has required permission"},{"ancestorTitles":["MCPAuthBridge","hasToolPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge hasToolPermission should return false when user lacks required permission","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false when user lacks required permission"},{"ancestorTitles":["MCPAuthBridge","hasToolPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge hasToolPermission should return false for unknown tools","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for unknown tools"},{"ancestorTitles":["MCPAuthBridge","requireToolPermission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge requireToolPermission should pass when user has permission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should pass when user has permission"},{"ancestorTitles":["MCPAuthBridge","requireToolPermission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge requireToolPermission should throw when user lacks permission","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw when user lacks permission"},{"ancestorTitles":["MCPAuthBridge","requireToolPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge requireToolPermission should throw for unknown tools","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw for unknown tools"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should extract JWT from Authorization header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract JWT from Authorization header"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should extract API key from x-api-key header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract API key from x-api-key header"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should extract API key from apikey header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract API key from apikey header"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should extract JWT from query parameter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract JWT from query parameter"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should extract API key from query parameter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract API key from query parameter"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should extract session ID from query parameter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract session ID from query parameter"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should extract auth from WebSocket metadata","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract auth from WebSocket metadata"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should handle array values in headers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle array values in headers"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should handle array values in query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle array values in query"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should return undefined when no credentials found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined when no credentials found"},{"ancestorTitles":["MCPAuthBridge","extractCredentials"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge extractCredentials should ignore invalid WebSocket metadata","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should ignore invalid WebSocket metadata"},{"ancestorTitles":["MCPAuthBridge","MCP_TOOL_PERMISSIONS"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge MCP_TOOL_PERMISSIONS should have permissions for all browser control tools","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should have permissions for all browser control tools"},{"ancestorTitles":["MCPAuthBridge","MCP_TOOL_PERMISSIONS"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge MCP_TOOL_PERMISSIONS should have read permissions for information tools","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should have read permissions for information tools"},{"ancestorTitles":["MCPAuthBridge","MCP_TOOL_PERMISSIONS"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge MCP_TOOL_PERMISSIONS should have appropriate permissions for session management","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have appropriate permissions for session management"},{"ancestorTitles":["MCPAuthBridge","MCP_TOOL_PERMISSIONS"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MCPAuthBridge MCP_TOOL_PERMISSIONS should have appropriate permissions for context management","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should have appropriate permissions for context management"}],"endTime":1752631733427,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/auth.test.ts","startTime":1752631733204,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Rate Limiter","createRateLimiter"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createRateLimiter should create a rate limiter with default options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a rate limiter with default options"},{"ancestorTitles":["Rate Limiter","createRateLimiter"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createRateLimiter should use in-memory store when Redis is not available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use in-memory store when Redis is not available"},{"ancestorTitles":["Rate Limiter","createRateLimiter"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createRateLimiter should create rate limiter with custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create rate limiter with custom options"},{"ancestorTitles":["Rate Limiter","createRateLimiter"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createRateLimiter should use custom key generator","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use custom key generator"},{"ancestorTitles":["Rate Limiter","Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter Key Generation should prioritize API key over user ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prioritize API key over user ID"},{"ancestorTitles":["Rate Limiter","Key Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter Key Generation should use user ID when API key is not present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use user ID when API key is not present"},{"ancestorTitles":["Rate Limiter","Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter Key Generation should fall back to IP address","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fall back to IP address"},{"ancestorTitles":["Rate Limiter","createEndpointRateLimiter"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createEndpointRateLimiter should create endpoint-specific rate limiter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create endpoint-specific rate limiter"},{"ancestorTitles":["Rate Limiter","createEndpointRateLimiter"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createEndpointRateLimiter should append endpoint to key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should append endpoint to key"},{"ancestorTitles":["Rate Limiter","createCostBasedRateLimiter"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createCostBasedRateLimiter should create cost-based rate limiter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create cost-based rate limiter"},{"ancestorTitles":["Rate Limiter","createCostBasedRateLimiter"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter createCostBasedRateLimiter should use custom cost function","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use custom cost function"},{"ancestorTitles":["Rate Limiter","RateLimitPresets"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter RateLimitPresets should have auth preset with strict limits","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have auth preset with strict limits"},{"ancestorTitles":["Rate Limiter","RateLimitPresets"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter RateLimitPresets should have api preset with moderate limits","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have api preset with moderate limits"},{"ancestorTitles":["Rate Limiter","RateLimitPresets"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter RateLimitPresets should have static preset with lenient limits","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have static preset with lenient limits"},{"ancestorTitles":["Rate Limiter","RateLimitPresets"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter RateLimitPresets should have browser preset with cost-based limits","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have browser preset with cost-based limits"},{"ancestorTitles":["Rate Limiter","RateLimitPresets"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter RateLimitPresets should have expensive preset with high cost","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have expensive preset with high cost"},{"ancestorTitles":["Rate Limiter","Redis Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter Redis Integration should use Redis store when available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use Redis store when available"},{"ancestorTitles":["Rate Limiter","Redis Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter Redis Integration should fall back to in-memory when Redis fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fall back to in-memory when Redis fails"},{"ancestorTitles":["Rate Limiter","Rate Limit Handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Rate Limiter Rate Limit Handler should handle rate limit exceeded","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle rate limit exceeded"}],"endTime":1752631733623,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/core/middleware/rate-limiter.test.ts","startTime":1752631733432,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Core Errors","AppError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors AppError should create a basic AppError","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create a basic AppError"},{"ancestorTitles":["Core Errors","AppError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors AppError should accept operational flag","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept operational flag"},{"ancestorTitles":["Core Errors","AppError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors AppError should accept details","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept details"},{"ancestorTitles":["Core Errors","AppError"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors AppError should capture stack trace","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should capture stack trace"},{"ancestorTitles":["Core Errors","Specific Error Classes","ValidationError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes ValidationError should create ValidationError with correct defaults","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create ValidationError with correct defaults"},{"ancestorTitles":["Core Errors","Specific Error Classes","ValidationError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes ValidationError should accept validation details","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept validation details"},{"ancestorTitles":["Core Errors","Specific Error Classes","AuthenticationError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes AuthenticationError should create AuthenticationError","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create AuthenticationError"},{"ancestorTitles":["Core Errors","Specific Error Classes","AuthenticationError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes AuthenticationError should use default message if none provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default message if none provided"},{"ancestorTitles":["Core Errors","Specific Error Classes","AuthorizationError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes AuthorizationError should create AuthorizationError","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create AuthorizationError"},{"ancestorTitles":["Core Errors","Specific Error Classes","AuthorizationError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes AuthorizationError should use default message","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default message"},{"ancestorTitles":["Core Errors","Specific Error Classes","NotFoundError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes NotFoundError should create NotFoundError","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create NotFoundError"},{"ancestorTitles":["Core Errors","Specific Error Classes","ConflictError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes ConflictError should create ConflictError","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create ConflictError"},{"ancestorTitles":["Core Errors","Specific Error Classes","RateLimitError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes RateLimitError should create RateLimitError","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create RateLimitError"},{"ancestorTitles":["Core Errors","Specific Error Classes","RateLimitError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes RateLimitError should accept custom message","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept custom message"},{"ancestorTitles":["Core Errors","Specific Error Classes","BadRequestError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes BadRequestError should create BadRequestError","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create BadRequestError"},{"ancestorTitles":["Core Errors","Specific Error Classes","UnprocessableEntityError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes UnprocessableEntityError should create UnprocessableEntityError","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create UnprocessableEntityError"},{"ancestorTitles":["Core Errors","Specific Error Classes","InternalServerError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes InternalServerError should create InternalServerError","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create InternalServerError"},{"ancestorTitles":["Core Errors","Specific Error Classes","ServiceUnavailableError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes ServiceUnavailableError should create ServiceUnavailableError","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create ServiceUnavailableError"},{"ancestorTitles":["Core Errors","Specific Error Classes","GatewayTimeoutError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes GatewayTimeoutError should create GatewayTimeoutError","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create GatewayTimeoutError"},{"ancestorTitles":["Core Errors","Specific Error Classes","SessionExpiredError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes SessionExpiredError should create SessionExpiredError","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create SessionExpiredError"},{"ancestorTitles":["Core Errors","Specific Error Classes","TokenError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes TokenError should create TokenError","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create TokenError"},{"ancestorTitles":["Core Errors","Specific Error Classes","TokenError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes TokenError should accept token expired code","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept token expired code"},{"ancestorTitles":["Core Errors","Specific Error Classes","ResourceLockedError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes ResourceLockedError should create ResourceLockedError","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create ResourceLockedError"},{"ancestorTitles":["Core Errors","Specific Error Classes","DuplicateEntryError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes DuplicateEntryError should create DuplicateEntryError","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create DuplicateEntryError"},{"ancestorTitles":["Core Errors","Specific Error Classes","DatabaseError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes DatabaseError should create DatabaseError","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create DatabaseError"},{"ancestorTitles":["Core Errors","Specific Error Classes","ExternalServiceError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes ExternalServiceError should create ExternalServiceError","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create ExternalServiceError"},{"ancestorTitles":["Core Errors","Specific Error Classes","ExternalServiceError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Specific Error Classes ExternalServiceError should accept custom status code","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should accept custom status code"},{"ancestorTitles":["Core Errors","Error Codes"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Codes should have all expected error codes","invocations":1,"location":null,"numPassingAsserts":12,"retryReasons":[],"status":"passed","title":"should have all expected error codes"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForREST"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForREST should serialize AppError correctly","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should serialize AppError correctly"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForREST"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForREST should serialize ZodError correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should serialize ZodError correctly"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForREST"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForREST should serialize generic Error correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should serialize generic Error correctly"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForREST"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForREST should hide error details in production","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should hide error details in production"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForGRPC"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForGRPC should serialize AppError for gRPC","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should serialize AppError for gRPC"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForGRPC"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForGRPC should serialize ZodError for gRPC","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should serialize ZodError for gRPC"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForGRPC"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForGRPC should map HTTP status codes to gRPC codes","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should map HTTP status codes to gRPC codes"},{"ancestorTitles":["Core Errors","Error Serialization","serializeErrorForWebSocket"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Error Serialization serializeErrorForWebSocket should serialize error for WebSocket","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should serialize error for WebSocket"},{"ancestorTitles":["Core Errors","Type Guards","isAppError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Type Guards isAppError should identify AppError instances","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should identify AppError instances"},{"ancestorTitles":["Core Errors","Type Guards","isAppError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Type Guards isAppError should reject non-AppError instances","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reject non-AppError instances"},{"ancestorTitles":["Core Errors","Type Guards","isOperationalError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Type Guards isOperationalError should identify operational errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should identify operational errors"},{"ancestorTitles":["Core Errors","Type Guards","isOperationalError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors Type Guards isOperationalError should reject non-operational errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject non-operational errors"},{"ancestorTitles":["Core Errors","normalizeError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors normalizeError should return Error instances as-is","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return Error instances as-is"},{"ancestorTitles":["Core Errors","normalizeError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors normalizeError should convert strings to Error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should convert strings to Error"},{"ancestorTitles":["Core Errors","normalizeError"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors normalizeError should extract message from objects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should extract message from objects"},{"ancestorTitles":["Core Errors","normalizeError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Core Errors normalizeError should handle unknown values","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle unknown values"}],"endTime":1752631733627,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/core/errors.test.ts","startTime":1752631733424,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GrpcAdapter","executeRequest"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter executeRequest should execute a unary gRPC call successfully","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should execute a unary gRPC call successfully"},{"ancestorTitles":["GrpcAdapter","executeRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter executeRequest should execute a streaming gRPC call successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should execute a streaming gRPC call successfully"},{"ancestorTitles":["GrpcAdapter","executeRequest"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter executeRequest should handle JWT authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle JWT authentication"},{"ancestorTitles":["GrpcAdapter","executeRequest"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter executeRequest should handle API key authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API key authentication"},{"ancestorTitles":["GrpcAdapter","executeRequest"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter executeRequest should handle gRPC errors properly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle gRPC errors properly"},{"ancestorTitles":["GrpcAdapter","executeRequest"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter executeRequest should handle invalid operation parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle invalid operation parameters"},{"ancestorTitles":["GrpcAdapter","executeRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter executeRequest should handle service not found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle service not found"},{"ancestorTitles":["GrpcAdapter","listEndpoints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter listEndpoints should return all available gRPC endpoints","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return all available gRPC endpoints"},{"ancestorTitles":["GrpcAdapter","getCapabilities"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter getCapabilities should return gRPC adapter capabilities","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return gRPC adapter capabilities"},{"ancestorTitles":["GrpcAdapter","error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter error handling should properly map gRPC status codes to HTTP status codes","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should properly map gRPC status codes to HTTP status codes"},{"ancestorTitles":["GrpcAdapter","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"GrpcAdapter error handling should handle AppError instances","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle AppError instances"}],"endTime":1752631733824,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/grpc-adapter.test.ts","startTime":1752631733630,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SessionMigration","migrate"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should migrate all sessions from source to target","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should migrate all sessions from source to target"},{"ancestorTitles":["SessionMigration","migrate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should skip existing sessions when skipExisting is true","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should skip existing sessions when skipExisting is true"},{"ancestorTitles":["SessionMigration","migrate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should delete from source after migration when deleteAfterMigration is true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should delete from source after migration when deleteAfterMigration is true"},{"ancestorTitles":["SessionMigration","migrate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should skip expired sessions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should skip expired sessions"},{"ancestorTitles":["SessionMigration","migrate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should apply filter function when provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should apply filter function when provided"},{"ancestorTitles":["SessionMigration","migrate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should process sessions in batches","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should process sessions in batches"},{"ancestorTitles":["SessionMigration","migrate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should call progress callback if provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call progress callback if provided"},{"ancestorTitles":["SessionMigration","migrate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should handle errors gracefully when continueOnError is true","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle errors gracefully when continueOnError is true"},{"ancestorTitles":["SessionMigration","migrate"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should throw error when continueOnError is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when continueOnError is false"},{"ancestorTitles":["SessionMigration","migrate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration migrate should handle empty source store","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle empty source store"},{"ancestorTitles":["SessionMigration","validateMigration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration validateMigration should validate successful migration","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should validate successful migration"},{"ancestorTitles":["SessionMigration","validateMigration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration validateMigration should detect missing sessions in target","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should detect missing sessions in target"},{"ancestorTitles":["SessionMigration","validateMigration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration validateMigration should detect extra sessions in target","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should detect extra sessions in target"},{"ancestorTitles":["SessionMigration","validateMigration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration validateMigration should filter expired sessions when checkExpired is true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should filter expired sessions when checkExpired is true"},{"ancestorTitles":["SessionMigration","backup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration backup should create backup of all sessions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create backup of all sessions"},{"ancestorTitles":["SessionMigration","backup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration backup should exclude expired sessions when includeExpired is false","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should exclude expired sessions when includeExpired is false"},{"ancestorTitles":["SessionMigration","backup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration backup should apply filter function when provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should apply filter function when provided"},{"ancestorTitles":["SessionMigration","backup"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration backup should return empty array for empty store","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for empty store"},{"ancestorTitles":["SessionMigration","restore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration restore should restore sessions from backup","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should restore sessions from backup"},{"ancestorTitles":["SessionMigration","restore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration restore should skip existing sessions when overwrite is false","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should skip existing sessions when overwrite is false"},{"ancestorTitles":["SessionMigration","restore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration restore should overwrite existing sessions when overwrite is true","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should overwrite existing sessions when overwrite is true"},{"ancestorTitles":["SessionMigration","restore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration restore should skip expired sessions when skipExpired is true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should skip expired sessions when skipExpired is true"},{"ancestorTitles":["SessionMigration","restore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration restore should call progress callback if provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call progress callback if provided"},{"ancestorTitles":["SessionMigration","restore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration restore should handle restore errors gracefully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle restore errors gracefully"},{"ancestorTitles":["SessionMigration","restore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SessionMigration restore should restore empty backup without errors","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should restore empty backup without errors"}],"endTime":1752631733829,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/store/session-migration.test.ts","startTime":1752631733632,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Security Validation","validateJavaScript","Valid Scripts"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Valid Scripts should allow simple arithmetic operations","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow simple arithmetic operations"},{"ancestorTitles":["Security Validation","validateJavaScript","Valid Scripts"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Valid Scripts should allow DOM queries","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow DOM queries"},{"ancestorTitles":["Security Validation","validateJavaScript","Valid Scripts"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Valid Scripts should allow element property access","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should allow element property access"},{"ancestorTitles":["Security Validation","validateJavaScript","Valid Scripts"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Valid Scripts should allow array operations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow array operations"},{"ancestorTitles":["Security Validation","validateJavaScript","Valid Scripts"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Valid Scripts should allow console logging","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow console logging"},{"ancestorTitles":["Security Validation","validateJavaScript","Script Length Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Script Length Validation should warn about very long scripts","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should warn about very long scripts"},{"ancestorTitles":["Security Validation","validateJavaScript","Script Length Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Script Length Validation should allow scripts under 10000 characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow scripts under 10000 characters"},{"ancestorTitles":["Security Validation","validateJavaScript","XSS Pattern Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript XSS Pattern Detection should detect inline event handlers","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect inline event handlers"},{"ancestorTitles":["Security Validation","validateJavaScript","XSS Pattern Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript XSS Pattern Detection should detect innerHTML assignments","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect innerHTML assignments"},{"ancestorTitles":["Security Validation","validateJavaScript","XSS Pattern Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript XSS Pattern Detection should detect document.write","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect document.write"},{"ancestorTitles":["Security Validation","validateJavaScript","XSS Pattern Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript XSS Pattern Detection should detect script element patterns","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect script element patterns"},{"ancestorTitles":["Security Validation","validateJavaScript","XSS Pattern Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript XSS Pattern Detection should detect document.cookie access","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect document.cookie access"},{"ancestorTitles":["Security Validation","validateJavaScript","XSS Pattern Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript XSS Pattern Detection should detect window.location manipulation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect window.location manipulation"},{"ancestorTitles":["Security Validation","validateJavaScript","Dangerous Keyword Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Dangerous Keyword Detection should detect eval usage as XSS pattern","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect eval usage as XSS pattern"},{"ancestorTitles":["Security Validation","validateJavaScript","Dangerous Keyword Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Dangerous Keyword Detection should detect Function constructor as XSS pattern","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect Function constructor as XSS pattern"},{"ancestorTitles":["Security Validation","validateJavaScript","Dangerous Keyword Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Dangerous Keyword Detection should warn about localStorage usage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should warn about localStorage usage"},{"ancestorTitles":["Security Validation","validateJavaScript","Dangerous Keyword Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Dangerous Keyword Detection should warn about sessionStorage usage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should warn about sessionStorage usage"},{"ancestorTitles":["Security Validation","validateJavaScript","Dangerous Keyword Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Dangerous Keyword Detection should warn about fetch usage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should warn about fetch usage"},{"ancestorTitles":["Security Validation","validateJavaScript","Dangerous Keyword Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Dangerous Keyword Detection should warn about __proto__ access","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should warn about __proto__ access"},{"ancestorTitles":["Security Validation","validateJavaScript","Dangerous Keyword Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Dangerous Keyword Detection should warn about constructor access","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should warn about constructor access"},{"ancestorTitles":["Security Validation","validateJavaScript","Infinite Loop Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Infinite Loop Detection should detect while(true) loops","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect while(true) loops"},{"ancestorTitles":["Security Validation","validateJavaScript","Infinite Loop Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Infinite Loop Detection should detect for(;;) loops","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect for(;;) loops"},{"ancestorTitles":["Security Validation","validateJavaScript","Infinite Loop Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Infinite Loop Detection should allow normal loops","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should allow normal loops"},{"ancestorTitles":["Security Validation","validateJavaScript","Case Sensitivity"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Case Sensitivity should detect patterns regardless of case","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect patterns regardless of case"},{"ancestorTitles":["Security Validation","validateJavaScript","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Edge Cases should handle empty strings","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle empty strings"},{"ancestorTitles":["Security Validation","validateJavaScript","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Edge Cases should handle whitespace-only strings","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle whitespace-only strings"},{"ancestorTitles":["Security Validation","validateJavaScript","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Edge Cases should handle comments","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle comments"},{"ancestorTitles":["Security Validation","validateJavaScript","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Edge Cases should detect dangerous patterns even in comments","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect dangerous patterns even in comments"},{"ancestorTitles":["Security Validation","validateJavaScript","Edge Cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Edge Cases should detect patterns in string literals","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect patterns in string literals"},{"ancestorTitles":["Security Validation","validateJavaScript","Error Messages"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Error Messages should provide clear error messages for XSS patterns","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should provide clear error messages for XSS patterns"},{"ancestorTitles":["Security Validation","validateJavaScript","Error Messages"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Error Messages should provide clear warning messages for dangerous keywords","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should provide clear warning messages for dangerous keywords"},{"ancestorTitles":["Security Validation","validateJavaScript","Complex Attack Scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Complex Attack Scenarios should detect multiple issues in one script","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should detect multiple issues in one script"},{"ancestorTitles":["Security Validation","validateJavaScript","Complex Attack Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Complex Attack Scenarios should detect DOM manipulation patterns","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect DOM manipulation patterns"},{"ancestorTitles":["Security Validation","validateJavaScript","Complex Attack Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Complex Attack Scenarios should detect javascript: protocol","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect javascript: protocol"},{"ancestorTitles":["Security Validation","validateJavaScript","Complex Attack Scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Complex Attack Scenarios should detect iframe injection","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect iframe injection"},{"ancestorTitles":["Security Validation","validateJavaScript","Return Value Structure"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Return Value Structure should always return valid structure","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should always return valid structure"},{"ancestorTitles":["Security Validation","validateJavaScript","Return Value Structure"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Return Value Structure should have proper error structure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have proper error structure"},{"ancestorTitles":["Security Validation","validateJavaScript","Return Value Structure"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Security Validation validateJavaScript Return Value Structure should have proper warning structure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have proper warning structure"}],"endTime":1752631734013,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/actions/security-validation.test.ts","startTime":1752631733835,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["path-utils","getDirname"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirname should return src directory in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return src directory in test environment"},{"ancestorTitles":["path-utils","getDirname"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirname should return src directory when JEST_WORKER_ID is set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return src directory when JEST_WORKER_ID is set"},{"ancestorTitles":["path-utils","getDirname"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirname should handle production environment case","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle production environment case"},{"ancestorTitles":["path-utils","getDirname"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirname should handle different URL formats consistently in test environment","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle different URL formats consistently in test environment"},{"ancestorTitles":["path-utils","getDirname"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirname should handle Windows-style file URLs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Windows-style file URLs"},{"ancestorTitles":["path-utils","getDirname"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirname should handle encoded URLs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle encoded URLs"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should return correct path in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct path in test environment"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should return correct path for nested directories in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct path for nested directories in test environment"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should return correct path when only JEST_WORKER_ID is set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct path when only JEST_WORKER_ID is set"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should handle production fallback case","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle production fallback case"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should handle empty relative path","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty relative path"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should handle paths with leading slash","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle paths with leading slash"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should work correctly when NODE_ENV is production but JEST_WORKER_ID is set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should work correctly when NODE_ENV is production but JEST_WORKER_ID is set"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should return consistent results across multiple calls","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return consistent results across multiple calls"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should handle deeply nested paths","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle deeply nested paths"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should handle paths with dots","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle paths with dots"},{"ancestorTitles":["path-utils","getDirnameFromSrc"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"path-utils getDirnameFromSrc should handle paths with dashes and underscores","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle paths with dashes and underscores"}],"endTime":1752631734014,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/utils/path-utils.test.ts","startTime":1752631733830,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ProxyManager","initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProxyManager initialization should initialize with proxy pool configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with proxy pool configuration"},{"ancestorTitles":["ProxyManager","proxy management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProxyManager proxy management should add a proxy to the pool","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add a proxy to the pool"},{"ancestorTitles":["ProxyManager","context proxy assignment"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProxyManager context proxy assignment should assign proxy to context when enabled","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should assign proxy to context when enabled"},{"ancestorTitles":["ProxyManager","context proxy assignment"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProxyManager context proxy assignment should fall back to pool proxy when context proxy is disabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fall back to pool proxy when context proxy is disabled"},{"ancestorTitles":["ProxyManager","proxy rotation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProxyManager proxy rotation should rotate proxy for context","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should rotate proxy for context"},{"ancestorTitles":["ProxyManager","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ProxyManager error handling should handle proxy errors and update health status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle proxy errors and update health status"},{"ancestorTitles":["ProxyManager","cleanup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProxyManager cleanup should clean up context proxy assignments","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should clean up context proxy assignments"}],"endTime":1752631734188,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/proxy/proxy-manager.test.ts","startTime":1752631734020,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Proxy Validation","validateProxyConfig"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyConfig should validate a valid HTTP proxy configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate a valid HTTP proxy configuration"},{"ancestorTitles":["Proxy Validation","validateProxyConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyConfig should validate a SOCKS5 proxy with authentication","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate a SOCKS5 proxy with authentication"},{"ancestorTitles":["Proxy Validation","validateProxyConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyConfig should reject invalid port numbers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject invalid port numbers"},{"ancestorTitles":["Proxy Validation","validateProxyConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyConfig should warn about weak passwords","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should warn about weak passwords"},{"ancestorTitles":["Proxy Validation","validateProxyConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyConfig should validate bypass patterns","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate bypass patterns"},{"ancestorTitles":["Proxy Validation","validateContextProxyConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateContextProxyConfig should validate a context with single proxy","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate a context with single proxy"},{"ancestorTitles":["Proxy Validation","validateContextProxyConfig"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateContextProxyConfig should validate a context with proxy pool","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate a context with proxy pool"},{"ancestorTitles":["Proxy Validation","validateContextProxyConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateContextProxyConfig should reject enabled context without proxy configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject enabled context without proxy configuration"},{"ancestorTitles":["Proxy Validation","validateContextProxyConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateContextProxyConfig should warn about short rotation intervals","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should warn about short rotation intervals"},{"ancestorTitles":["Proxy Validation","validateProxyCredentials"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyCredentials should validate strong credentials","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate strong credentials"},{"ancestorTitles":["Proxy Validation","validateProxyCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyCredentials should reject empty username","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject empty username"},{"ancestorTitles":["Proxy Validation","validateProxyCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyCredentials should reject short passwords","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject short passwords"},{"ancestorTitles":["Proxy Validation","validateProxyCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyCredentials should reject common weak passwords","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject common weak passwords"},{"ancestorTitles":["Proxy Validation","validateProxyCredentials"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation validateProxyCredentials should reject invalid username characters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject invalid username characters"},{"ancestorTitles":["Proxy Validation","sanitizeProxyConfigForLogging"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation sanitizeProxyConfigForLogging should redact password in auth configuration","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should redact password in auth configuration"},{"ancestorTitles":["Proxy Validation","sanitizeProxyConfigForLogging"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation sanitizeProxyConfigForLogging should not include auth field if not present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not include auth field if not present"},{"ancestorTitles":["Proxy Validation","generateSecureProxyConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation generateSecureProxyConfig should generate secure proxy configuration with defaults","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should generate secure proxy configuration with defaults"},{"ancestorTitles":["Proxy Validation","generateSecureProxyConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Proxy Validation generateSecureProxyConfig should allow protocol override","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow protocol override"}],"endTime":1752631734192,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/puppeteer/proxy/proxy-validation.test.ts","startTime":1752631734020,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Redis Migration Compatibility","RedisMigrationManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Redis Migration Compatibility RedisMigrationManager should be instance of MigrationManager","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be instance of MigrationManager"},{"ancestorTitles":["Redis Migration Compatibility","RedisMigrationManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Redis Migration Compatibility RedisMigrationManager should have all required methods","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should have all required methods"},{"ancestorTitles":["Redis Migration Compatibility","RedisMigrationManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Redis Migration Compatibility RedisMigrationManager should create factory with all strategies","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create factory with all strategies"},{"ancestorTitles":["Redis Migration Compatibility","Module exports"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Redis Migration Compatibility Module exports should export all required types and classes","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should export all required types and classes"}],"endTime":1752631734361,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/store/redis-migration.test.ts","startTime":1752631734194,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Authentication Middleware","createAuthMiddleware"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware createAuthMiddleware should authenticate valid token and attach user to request","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should authenticate valid token and attach user to request"},{"ancestorTitles":["Authentication Middleware","createAuthMiddleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware createAuthMiddleware should reject request without token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject request without token"},{"ancestorTitles":["Authentication Middleware","createAuthMiddleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware createAuthMiddleware should reject invalid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid token"},{"ancestorTitles":["Authentication Middleware","createAuthMiddleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware createAuthMiddleware should reject token with non-existent session","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject token with non-existent session"},{"ancestorTitles":["Authentication Middleware","createApiKeyMiddleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware createApiKeyMiddleware should authenticate valid API key","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should authenticate valid API key"},{"ancestorTitles":["Authentication Middleware","createApiKeyMiddleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware createApiKeyMiddleware should reject request without API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject request without API key"},{"ancestorTitles":["Authentication Middleware","createApiKeyMiddleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware createApiKeyMiddleware should reject expired API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject expired API key"},{"ancestorTitles":["Authentication Middleware","requireRoles"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requireRoles should allow user with required role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow user with required role"},{"ancestorTitles":["Authentication Middleware","requireRoles"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requireRoles should allow user with any of the required roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow user with any of the required roles"},{"ancestorTitles":["Authentication Middleware","requireRoles"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requireRoles should reject user without required role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject user without required role"},{"ancestorTitles":["Authentication Middleware","requireRoles"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requireRoles should reject unauthenticated user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject unauthenticated user"},{"ancestorTitles":["Authentication Middleware","requirePermissions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requirePermissions should allow API key with required permissions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow API key with required permissions"},{"ancestorTitles":["Authentication Middleware","requirePermissions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requirePermissions should reject API key without all required permissions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject API key without all required permissions"},{"ancestorTitles":["Authentication Middleware","requirePermissions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requirePermissions should reject regular user (not API key)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject regular user (not API key)"},{"ancestorTitles":["Authentication Middleware","optionalAuth"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware optionalAuth should continue without authentication if no token provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue without authentication if no token provided"},{"ancestorTitles":["Authentication Middleware","optionalAuth"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware optionalAuth should authenticate if token is provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should authenticate if token is provided"}],"endTime":1752631734370,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/auth/middleware.test.ts","startTime":1752631734197,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Security Headers Middleware","securityHeaders"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware securityHeaders should create helmet middleware","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create helmet middleware"},{"ancestorTitles":["Security Headers Middleware","additionalSecurityHeaders"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware additionalSecurityHeaders should set additional security headers","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should set additional security headers"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFProtection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFProtection should create CSRF protection middleware array","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create CSRF protection middleware array"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFProtection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFProtection should skip CSRF for health endpoints","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip CSRF for health endpoints"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFProtection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFProtection should skip CSRF for safe HTTP methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip CSRF for safe HTTP methods"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFProtection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFProtection should generate CSRF secret if not exists","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate CSRF secret if not exists"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFProtection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFProtection should reject POST request without CSRF token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject POST request without CSRF token"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFProtection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFProtection should handle CSRF token validation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle CSRF token validation"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFTokenEndpoint"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFTokenEndpoint should generate CSRF token when secret exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate CSRF token when secret exists"},{"ancestorTitles":["Security Headers Middleware","CSRF Protection","createCSRFTokenEndpoint"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware CSRF Protection createCSRFTokenEndpoint should return error when secret is missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return error when secret is missing"},{"ancestorTitles":["Security Headers Middleware","Request type extensions"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Security Headers Middleware Request type extensions should handle requests with session property","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle requests with session property"}],"endTime":1752631734535,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/core/middleware/security-headers.test.ts","startTime":1752631734368,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Execute-in-Context Tool Implementation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Execute-in-Context Tool Implementation should have the execute-in-context tool defined in the tool definitions","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should have the execute-in-context tool defined in the tool definitions"},{"ancestorTitles":["Execute-in-Context Tool Implementation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Execute-in-Context Tool Implementation should have the ExecuteInContextTool class implemented","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should have the ExecuteInContextTool class implemented"},{"ancestorTitles":["Execute-in-Context Tool Implementation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Execute-in-Context Tool Implementation should have a case for execute-in-context in the tool handler switch","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have a case for execute-in-context in the tool handler switch"},{"ancestorTitles":["Execute-in-Context Tool Implementation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Execute-in-Context Tool Implementation should have proper input validation and REST adapter integration","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should have proper input validation and REST adapter integration"}],"endTime":1752631734541,"message":"","name":"/home/william/git/puppeteer-mcp/tests/unit/mcp/execute-tool-verification.test.ts","startTime":1752631734375,"status":"passed","summary":""}],"wasInterrupted":false}
